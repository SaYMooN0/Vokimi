@inject TestsCreationDbOperationsService testsCreationDbOperationsService
@inject VokimiStorageService vokimiStorageService

<div class="test-cover">
    <img src="@ImgOperationsHelper.ImageUrlWithVersion(Vm.CoverPath)" alt="Test Cover" />
</div>

<InputFile id="cover" class="form-control" OnChange="HandleFileChange" accept=".jpg,.png,.webp" hidden />
<label class="cover-error">@coverUploadingError</label>
<label for="cover" class="change-btn">Change</label>
<div class="remove-btn" @onclick="HandleCoverRemoving">Remove</div>

@code {
    [Parameter] public TestCoverAreaContentViewModel Vm { get; set; }

    private string coverUploadingError = string.Empty;

    private async void HandleCoverRemoving() {
        Err err = await testsCreationDbOperationsService.UpdateTestCover(Vm.MainInfoId, ImgOperationsHelper.DefaultTestCoverImg);
        if (err.NotNone()) {
            coverUploadingError = err.ToString();
        }
        else {
            Vm.UpdateCoverPath(ImgOperationsHelper.DefaultTestCoverImg);
            StateHasChanged();
        }
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e) {
        var file = e.File;

        if (file is not null) {
            if (file.Size > BaseTestCreationConsts.MaxImageSizeInBytes) {
                coverUploadingError = $"File is too big. Max allowed size: {BaseTestCreationConsts.MaxImageSizeInMB}";
                return;
            }
            try {
                using (var stream = file.OpenReadStream(maxAllowedSize: BaseTestCreationConsts.MaxImageSizeInBytes)) {
                    var result = await vokimiStorageService.SaveDraftTestCover(Vm.TestId, stream);
                    result.Switch(
                        async path => {
                            Err err = await testsCreationDbOperationsService.UpdateTestCover(Vm.MainInfoId, path);
                            if (err.NotNone()) {
                                coverUploadingError = err.ToString();
                            }
                            else {
                                Vm.UpdateCoverPath(path);
                                StateHasChanged();
                            }
                        },
                        err => coverUploadingError = $"Error uploading cover: {err.Message}"
                    );

                }
            } catch (Exception ex) {
                coverUploadingError = $"Server error. Please try again later";
            }
        }
    }
}
