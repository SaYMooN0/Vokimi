@using Vokimi.Components.Pages.TestsCreation.test_overview_components.dialogs
@using Vokimi.Components.Pages.TestsCreation.test_overview_components.areas_shared_components

@inject IDbContextFactory<VokimiDbContext> dbContextFactory

<ActionConfirmationDialog @ref="confirmationDialogRef"
                          ConfirmButtonText="Delete" />

<NewQuestionCreationDialog @ref="@questionCreationDialogRef"
                           ParentStateHasChanged="()=>{using (var dbContext = dbContextFactory.CreateDbContext()) {FetchQuestions(dbContext);}}" />


<AreaHeader LabelText=@($"Test Questions ({Questions.Count})")>
    <AreaIcon>
        <svg viewBox="0 0 24 24" fill="none">
            <path d="M2.5 12C2.5 7.52166 2.5 5.28249 3.89124 3.89124C5.28249 2.5 7.52166 2.5 12 2.5C16.4783 2.5 18.7175 2.5 20.1088 3.89124C21.5 5.28249 21.5 7.52166 21.5 12C21.5 16.4783 21.5 18.7175 20.1088 20.1088C18.7175 21.5 16.4783 21.5 12 21.5C7.52166 21.5 5.28249 21.5 3.89124 20.1088C2.5 18.7175 2.5 16.4783 2.5 12Z" stroke="currentColor" stroke-width="1.5" />
            <path d="M10 9C10 7.89543 10.8954 7 12 7C13.1046 7 14 7.89543 14 9C14 9.39815 13.8837 9.76913 13.6831 10.0808C13.0854 11.0097 12 11.8954 12 13V13.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" />
            <path d="M11.992 17H12.001" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
        </svg>
    </AreaIcon>
    <RightSideContent>
        <div class="quesitions-visibility-btn" @onclick="()=>areQuestionsHidden=!areQuestionsHidden">
            @(areQuestionsHidden ? "Show Questions" : "Hide Questions")
        </div>
    </RightSideContent>
</AreaHeader>
<div class='@(areQuestionsHidden? "question-vms-container-hidden": "question-vms-container")'>
    @for (int i = 0; i < Questions.Count(); i++) {
        var q = Questions[i];
        var localIndex = i;
        <div class="question-view-component">
            <div class="question-info">
                <p class="question-text">@(localIndex + 1). @q.Text</p>
                <label class="answers-count">Answers count: @q.AnswersCount (@(q.IsMultipleChoice ? "Multi-Answer" : "Single-Answer"))</label>
            </div>
            <div class="question-actions">
                <div class="edit-question-btn" @onclick="()=>EditQuestionAction(q.Id)">
                    Edit
                    <svg viewBox="0 0 24 24" fill="none">
                        <path d="M16.2141 4.98239L17.6158 3.58063C18.39 2.80646 19.6452 2.80646 20.4194 3.58063C21.1935 4.3548 21.1935 5.60998 20.4194 6.38415L19.0176 7.78591M16.2141 4.98239L10.9802 10.2163C9.93493 11.2616 9.41226 11.7842 9.05637 12.4211C8.70047 13.058 8.3424 14.5619 8 16C9.43809 15.6576 10.942 15.2995 11.5789 14.9436C12.2158 14.5877 12.7384 14.0651 13.7837 13.0198L19.0176 7.78591M16.2141 4.98239L19.0176 7.78591" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                        <path d="M21 12C21 16.2426 21 18.364 19.682 19.682C18.364 21 16.2426 21 12 21C7.75736 21 5.63604 21 4.31802 19.682C3 18.364 3 16.2426 3 12C3 7.75736 3 5.63604 4.31802 4.31802C5.63604 3 7.75736 3 12 3" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" />
                    </svg>
                </div>
                <svg class="delete-question-btn" @onclick="()=>OnDelteQuestionPressed(localIndex, q.Id)" viewBox="0 0 24 24" fill="none">
                    <path d="M16 12L8 12" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                    <path d="M2.5 12C2.5 7.52166 2.5 5.28249 3.89124 3.89124C5.28249 2.5 7.52166 2.5 12 2.5C16.4783 2.5 18.7175 2.5 20.1088 3.89124C21.5 5.28249 21.5 7.52166 21.5 12C21.5 16.4783 21.5 18.7175 20.1088 20.1088C18.7175 21.5 16.4783 21.5 12 21.5C7.52166 21.5 5.28249 21.5 3.89124 20.1088C2.5 18.7175 2.5 16.4783 2.5 12Z" stroke="currentColor" stroke-width="1.5" />
                </svg>
            </div>
        </div>
    }
</div>

<div>
    <button class="new-question-btn" @onclick="()=>questionCreationDialogRef.Open()">
        <svg viewBox="0 0 24 24" fill="none">
            <path d="M12 4V20M20 12H4" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round" />
        </svg>
        New Question
    </button>
</div>
@code {
    private NewQuestionCreationDialog questionCreationDialogRef;
    private ActionConfirmationDialog confirmationDialogRef;

    private List<QuestionBriefInfoDto> Questions { get; set; } = [];
    private bool areQuestionsHidden = false;

    [CascadingParameter(Name = "TestId")] public DraftTestId TestId { get; set; }
    [Parameter] public Action<DraftTestQuestionId> EditQuestionAction { get; set; }



    private void OnDelteQuestionPressed(int i, DraftTestQuestionId questionId) =>
        confirmationDialogRef.Open(
            $"Are you sure you want to delete #{i + 1} question?",
            () => DeleteQuestionFunc(questionId)
        );


    protected override void OnInitialized() {
        base.OnInitialized();
        using (var dbContext = dbContextFactory.CreateDbContext()) {
            FetchQuestions(dbContext);
        }

    }
    private void FetchQuestions(VokimiDbContext dbContext) {
        DraftGenericTest? test = dbContext.DraftGenericTests.FirstOrDefault(t => t.Id == TestId);
        if (test is null) {
            Questions = [];
        }
        else {
            Questions = test.Questions
                .Select(QuestionBriefInfoDto.FromDraftGenericTestQuestion)
                .ToList();
        }
        StateHasChanged();
    }
    private async Task<Err> DeleteQuestionFunc(DraftTestQuestionId questionId) {
        Err deletionErr = Err.None;
        using (var dbContext = await dbContextFactory.CreateDbContextAsync()) {
            deletionErr = await GenericTestsCreationDbOperations.DeleteDraftTestQuestion(dbContext, questionId);
            if (!deletionErr.NotNone()) {
                FetchQuestions(dbContext);
            }
        }
        return deletionErr;
    }
    private record class QuestionBriefInfoDto(
        DraftTestQuestionId Id,
        string Text,
        ushort AnswersCount,
        bool IsMultipleChoice)
    {
        internal static QuestionBriefInfoDto FromDraftGenericTestQuestion(DraftGenericTestQuestion question) =>
            new(
                question.Id,
                question.Text,
                (ushort)question.Answers.Count,
                question.IsMultipleChoice
            );
    }
}