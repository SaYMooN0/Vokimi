@using Vokimi.Components.Pages.TestsCreation.test_overview_components.dialogs
@inject TestsCreationDbOperationsService testsCreationDbOperationsService

<ActionConfirmationDialog @ref="confirmationDialogRef"
                          ConfirmAction="DeleteQuestion"
                          ConfirmButtonText="Delete" />

<NewQuestionCreationDialog @ref="@questionCreationDialogRef" ParentStateHasChanged="FetchQuestions" />

<label class="question-area-title">Test Questions (@Questions.Count)</label>
<div class="question-vms-container">
    @for (int i = 0; i < Questions.Count(); i++) {
        var q = Questions[i];
        var localIndex = i;
        <div class="question-view-component">
            <div class="question-info">
                <p class="question-text">@(localIndex + 1). @q.Text</p>
                <label class="answers-count">Answers count: @q.AnswersCount (@(q.IsMultipleChoice ? "Multi-Answer" : "Single-Answer"))</label>
            </div>
            <div class="question-actions">
                <div class="edit-question-btn" @onclick="()=>EditQuestionAction(q.Id)">
                    Edit
                    <svg viewBox="0 0 24 24" fill="none">
                        <path d="M16.2141 4.98239L17.6158 3.58063C18.39 2.80646 19.6452 2.80646 20.4194 3.58063C21.1935 4.3548 21.1935 5.60998 20.4194 6.38415L19.0176 7.78591M16.2141 4.98239L10.9802 10.2163C9.93493 11.2616 9.41226 11.7842 9.05637 12.4211C8.70047 13.058 8.3424 14.5619 8 16C9.43809 15.6576 10.942 15.2995 11.5789 14.9436C12.2158 14.5877 12.7384 14.0651 13.7837 13.0198L19.0176 7.78591M16.2141 4.98239L19.0176 7.78591" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                        <path d="M21 12C21 16.2426 21 18.364 19.682 19.682C18.364 21 16.2426 21 12 21C7.75736 21 5.63604 21 4.31802 19.682C3 18.364 3 16.2426 3 12C3 7.75736 3 5.63604 4.31802 4.31802C5.63604 3 7.75736 3 12 3" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" />
                    </svg>
                </div>
                <div class="delete-question-btn" @onclick="()=>OnDelteQuestionPressed(localIndex)">
                    <svg viewBox="0 0 448 512">
                        <path d="M432 256c0 17.7-14.3 32-32 32L48 288c-17.7 0-32-14.3-32-32s14.3-32 32-32l352 0c17.7 0 32 14.3 32 32z" />
                    </svg>
                </div>
            </div>
        </div>
    }
</div>

<div>
    <button class="new-question-btn" @onclick="()=>questionCreationDialogRef.Open()">
        New Question
    </button>
</div>
@code {
    private NewQuestionCreationDialog questionCreationDialogRef;
    private ActionConfirmationDialog confirmationDialogRef;

    private List<QuestionBriefInfoDto> Questions { get; set; } = [];

    [CascadingParameter(Name = "TestId")] public DraftTestId TestId { get; set; }
    [Parameter] public Action<DraftTestQuestionId> EditQuestionAction { get; set; }

    private int questionToDeleteIndex;

    private async Task<Err> DeleteQuestion() {
        return Err.None;
    }
    private void OnDelteQuestionPressed(int i) {
        questionToDeleteIndex = i;
        confirmationDialogRef.Open($"Are you sure you want to delete #{i + 1} question?");
    }

    protected override async Task OnInitializedAsync() {
        await FetchQuestions();
        base.OnParametersSet();
    }
    private async Task FetchQuestions() {
        var dbQuestions = await testsCreationDbOperationsService.GetDraftTestQuestionsById(TestId);
        Questions = dbQuestions.Select(q => new QuestionBriefInfoDto(q)).ToList();
        StateHasChanged();
    }
}