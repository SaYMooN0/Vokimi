@inject TestsCreationDbOperationsService testsCreationDbOperationsService

@rendermode InteractiveServer

<BaseDialog DialogId="question-editing-dialog" @ref="baseDialogRef">
    <div class="dialog-content">
        <label class="text-label">Enter the text of the question (it can be changed later)</label>
        <input @bind="questionText" placeholder="Question text" name="@Guid.NewGuid()" class="question-text-input" />

        <div class="choose-type-container">
            <label class="choose-type-label">Answers Type:</label>
            <div class="select-wrapper">
                <select @bind="answersType" class="type-select">
                    @foreach (var t in Enum.GetValues<AnswersType>()) {
                        <option value="@t">@AnswerTypeToUserText(t)</option>
                    }
                </select>
            </div>
        </div>
      

        <label class="server-message">@serverMessage</label>
        <div class="bottom-btns-container">
            <div class="cancel-btn" @onclick="Close">Cancel</div>
            <div class="continue-btn" @onclick="SaveNewQuestion">Continue</div>
        </div>

    </div>


</BaseDialog>
@code {
    private BaseDialog baseDialogRef { get; set; }

    private string serverMessage { get; set; }
    private string questionText { get; set; }
    private AnswersType answersType { get; set; } = AnswersType.TextOnly;

    [CascadingParameter(Name = "TestId")] public DraftTestId TestId { get; set; }
    [Parameter] public EventCallback ParentStateHasChanged { get; set; }

    private async void SaveNewQuestion() {
        if (string.IsNullOrEmpty(questionText) || questionText.Length < 10) {
            serverMessage = "Question text cannot be less than 10 characters";
            return;
        }
        else if (questionText.Length > 127) {
            serverMessage = "Question text cannot be more than 127 characters";
            return;
        }
        DraftGenericTestQuestion question = DraftGenericTestQuestion.CreateNew(questionText, answersType, TestId);
        Err err = await testsCreationDbOperationsService.AddQuestionToGenericTest(TestId, question);
        if (err.NotNone()) {
            serverMessage = err.ToString();
            return;
        }
        await Close();
        await ParentStateHasChanged.InvokeAsync();

    }
    public async Task Open() {
        serverMessage = string.Empty;
        questionText = string.Empty;
        await baseDialogRef.OpenAsync();

    }
    private async Task Close() => await baseDialogRef.CloseAsync();

    private string AnswerTypeToUserText(AnswersType t) => t switch {
        AnswersType.TextOnly => "Text only",
        AnswersType.TextAndImage => "Text and image",
        AnswersType.ImageOnly => "Image only",
        _ => throw new NotImplementedException()
    };
}
