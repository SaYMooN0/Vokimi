@inject AuthHelperService authHelperService
@inject IHttpContextAccessor httpContextAccessor
@inject IDbContextFactory<VokimiDbContext> dbContextFactory

@rendermode InteractiveServer
@attribute [Authorize]
@page "/newtest/gen/{testId}"


<PageTitle>New Test</PageTitle>


<div class="central-align">
    @if (!string.IsNullOrEmpty(pageInitializationError)) {
        <p>@pageInitializationError</p>
    }
    else if (creator is not null && draftTest is not null) {
        <CascadingValue Value="@draftTest.Id" Name="TestId">
            @switch (pageState) {
                case TestCreationPageState.Overview:
                    <TestOverview ChangePageStateToMainInfoEditing="()=>ChangePageState(TestCreationPageState.MainInfoEditing)"
                                  ChangePageStateToQuestionEditing="ChangePageStateToQuestionEditing"
                                  ChangePageStateToConclusionEditing="()=>ChangePageState(TestCreationPageState.ConclusionEditing)"
                                  ChangePageStateToResultsEditing="()=>ChangePageState(TestCreationPageState.ResultsEditing)"
                                  ChangePageStateToStylesEditing="()=>ChangePageState(TestCreationPageState.StylesEditing)"
                                  ChangePageStateToPublishing="()=>ChangePageState(TestCreationPageState.TestPublishing)" />
                    break;
                case TestCreationPageState.MainInfoEditing:
                    <MainInfoEditing BackToOverviewAction="()=>ChangePageState(TestCreationPageState.Overview)" />
                    break;
                case TestCreationPageState.QuestionEditing:
                    <QuestionEditing QuestionId="currentQuestionToEditId"
                                     BackToOverviewAction="()=>ChangePageState(TestCreationPageState.Overview)" />
                    break;
                case TestCreationPageState.ResultsEditing:
                    <ResultsEditing BackToOverviewAction="()=>ChangePageState(TestCreationPageState.Overview)" />
                    break;
                case TestCreationPageState.ConclusionEditing:
                    <ConclusionEditing BackToOverviewAction="()=>ChangePageState(TestCreationPageState.Overview)" />
                    break;
                case TestCreationPageState.StylesEditing:
                    <StylesEditing BackToOverviewAction="()=>ChangePageState(TestCreationPageState.Overview)" />
                    break;
                case TestCreationPageState.TestPublishing:
                    <TestPublishing BackToOverviewAction="()=>ChangePageState(TestCreationPageState.Overview)" />
                    break;
                default:
                    <h2>An error has occurred, please refresh the page</h2>
                    break;
            }
        </CascadingValue>
    }
    else {
        <h2 class="error-occurred">An error has occurred. Try to refresh the page</h2>
    }
</div>

@code {
    [Parameter]
    public string TestId { get; set; } = string.Empty;

    private string pageInitializationError = string.Empty;
    private TestCreationPageState pageState { get; set; } = TestCreationPageState.Overview;
    private DraftTestId? parsedTestId = null;

    private enum TestCreationPageState
    {
        Overview,
        MainInfoEditing,
        QuestionEditing,
        ResultsEditing,
        ConclusionEditing,
        StylesEditing,
        TestPublishing

    }

    private DraftTestQuestionId currentQuestionToEditId;
    private void ChangePageStateToQuestionEditing(DraftTestQuestionId questionId) {
        currentQuestionToEditId = questionId;
        ChangePageState(TestCreationPageState.QuestionEditing);
    }


    private AppUser creator { get; set; }
    private DraftGenericTest draftTest { get; set; }

    private void ChangePageState(TestCreationPageState newState) {
        pageState = newState;
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync() {

        pageInitializationError = string.Empty;

        if (!Guid.TryParse(TestId, out Guid parsedGuid)) {
            pageInitializationError = "Invalid test ID format.";
            return;
        }
        parsedTestId = new(parsedGuid);

        AppUserId? userId = authHelperService.GetUserIdFromClaims(httpContextAccessor.HttpContext.User);
        if (userId is null) {
            pageInitializationError = "An error has occurred. Try to log out of your account and log in again.";
            return;
        }
        using (var db = dbContextFactory.CreateDbContext()) {
            creator = await db.AppUsers.FirstOrDefaultAsync(u => u.Id == userId.Value);
            if (creator is null) {
                pageInitializationError = "An error has occurred. Try to log out of your account and log in again.";
                return;
            }

            DraftGenericTest? genericTest = await db.DraftGenericTests.FirstOrDefaultAsync(t => t.Id == parsedTestId.Value);
            if (genericTest is null) {
                pageInitializationError = "Test not found";
            }
            else {
                draftTest = genericTest;
                if (!creator.DraftTests.Contains(draftTest)) {
                    pageInitializationError = "You don't have access to this test";
                }
            }

        }
    }
}
