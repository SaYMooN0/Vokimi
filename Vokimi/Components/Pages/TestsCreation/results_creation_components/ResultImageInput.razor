@inject VokimiStorageService vokimiStorageService


<div class="img-input-container">
    @if (AnyImage) {
        <img class="img-display" src="@ImgOperationsHelper.ImageUrlWithVersion(ImagePath)" alt="Img" />
    }
    <InputFile id="@inputKey" OnChange="HandleFileChange" accept=".jpg,.png,.webp" hidden />
    @if (AnyImage) {
        <div class="img-input-btns">
            <label for="@inputKey" class="change-btn">Change Image</label>
            <label class="delete-img-btn" @onclick="()=>SetImagePath(string.Empty)">
                Remove image
            </label>
        </div>
    }
    else {
        <label for="@inputKey" class="add-img-btn">
            <span>Add Image</span>
            <svg viewBox="0 0 512 512">
                <path d="M448 80c8.8 0 16 7.2 16 16V415.8l-5-6.5-136-176c-4.5-5.9-11.6-9.3-19-9.3s-14.4 3.4-19 9.3L202 340.7l-30.5-42.7C167 291.7 159.8 288 152 288s-15 3.7-19.5 10.1l-80 112L48 416.3l0-.3V96c0-8.8 7.2-16 16-16H448zM64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zm80 192a48 48 0 1 0 0-96 48 48 0 1 0 0 96z" />
            </svg>
        </label>
    }
    <label class="error-string">@errorString</label>
</div>


@code {
    private string inputKey = Guid.NewGuid().ToString();
    private string errorString = "";
    private bool AnyImage => !string.IsNullOrEmpty(ImagePath);

    [CascadingParameter(Name = "TestId")] public DraftTestId TestId { get; set; }
    [Parameter] public string ImagePath { get; set; }
    [Parameter] public EventCallback<string> ImagePathChanged { get; set; }

    private async Task HandleFileChange(InputFileChangeEventArgs e) {
        var file = e.File;


        if (file is not null) {
            if (file.Size > BaseTestCreationConsts.MaxImageSizeInBytes) {
                errorString = $"File is too big. Max allowed size: {BaseTestCreationConsts.MaxImageSizeInMB} MB";
                return;
            }
            try {
                using (var stream = file.OpenReadStream(maxAllowedSize: BaseTestCreationConsts.MaxImageSizeInBytes)) {
                    (await vokimiStorageService.SaveDraftTestResultImage(stream, TestId, inputKey)).Switch(
                      SetImagePath,
                      err => errorString = err.Message
                    );
                }
            } catch (Exception ex) {
                errorString = $"Server error. Please try again later";
            }
        }
    }
    private void SetImagePath(string path) {
        ImagePath = path;
        ImagePathChanged.InvokeAsync(path);
    }
}
