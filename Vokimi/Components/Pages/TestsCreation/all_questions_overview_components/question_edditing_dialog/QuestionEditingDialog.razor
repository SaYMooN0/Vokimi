<BaseDialog DialogId="question-editing-dialog" @ref="baseDialogRef">
    @if (isTypeChoosingState) {
        <NewQuestionTypeChoosing CancelAction="()=>{Close();}"
                                 GoToNextStageAction="(text, type)=>{throw new NotImplementedException();}" />
    }
    else {
        <button class="close-btn" @onclick="Close">
            <svg viewBox="0 0 384 512">
                <path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z" />
            </svg>
        </button>

        <div class="dialog-content">
            <label class="question-text-label"></label>
        </div>
        <div class="bottom-btns-container">
            <div class="cancel-btn" @onclick="Close">Cancel</div>
            <div class="save-btn">Save</div>
        </div>
    }

</BaseDialog>
@code {
    private BaseDialog baseDialogRef;
    private bool isTypeChoosingState = true;
    private QuestionEditingForm data;


    [Parameter] public AppUserId creatorId { get; set; }
    [Parameter] public DraftTestId testId { get; set; }

    private async void SaveNewQuestion(string text, AnswersType type) {

    }

    public async Task NewQuestion() {
        isTypeChoosingState = true;
        data = QuestionEditingForm.NewDefault();
        await baseDialogRef.OpenAsync();

    }

    public async Task EditQuestion(QuestionEditingForm quesionInfo) {
        isTypeChoosingState = false;
        data = quesionInfo;
        await baseDialogRef.OpenAsync();
    }

    private async Task Close() => await baseDialogRef.CloseAsync();
}
