@inject VokimiStorageService vokimiStorageService
@inject TestsCreationDbOperationsService testsCreationDbOperationsService


<div class="answer-main-content">
    @if (AnyImage) {
        <img src="@ImgOperationsHelper.ImageUrlWithVersion(AnswerImage)" alt="Img" />
    }
    <div class="img-input-container">
        <InputFile id="@id" OnChange="HandleFileChange" accept=".jpg,.png,.webp" hidden />
        @if (AnyImage) {
            <label for="@id" class="change-btn">Change Image</label>

        }
        else {
            <label for="@id" class="add-img-btn">
                Add Image
                <svg viewBox="0 0 512 512">
                    <path d="M448 80c8.8 0 16 7.2 16 16V415.8l-5-6.5-136-176c-4.5-5.9-11.6-9.3-19-9.3s-14.4 3.4-19 9.3L202 340.7l-30.5-42.7C167 291.7 159.8 288 152 288s-15 3.7-19.5 10.1l-80 112L48 416.3l0-.3V96c0-8.8 7.2-16 16-16H448zM64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zm80 192a48 48 0 1 0 0-96 48 48 0 1 0 0 96z" />
                </svg>
            </label>

        }
        <label class="error-string">@errorString</label>
    </div>
</div>

@code {
    private string id = Guid.NewGuid().ToString();
    private string errorString = "";
    private bool AnyImage => !string.IsNullOrEmpty(AnswerImage);

    [Parameter] public DraftTestQuestionId QuestionId { get; set; }
    [Parameter] public string AnswerImage { get; set; }
    [Parameter] public EventCallback<string> AnswerImageChanged { get; set; }
    private async Task HandleFileChange(InputFileChangeEventArgs e) {
        var file = e.File;
        int maxAllowedSize = 3145728; /* 3MB */

        if (file is not null) {
            if (file.Size > maxAllowedSize) {
                errorString = $"File is too big. Max allowed size: 3MB";
                return;
            }
            try {
                using (var stream = file.OpenReadStream(maxAllowedSize: maxAllowedSize)) {
                    (await vokimiStorageService.SaveDraftTestAnswerImage(stream, QuestionId)).Switch(
                      path => { AnswerImage = path; AnswerImageChanged.InvokeAsync(path); },
                        err => errorString = $"Error uploading cover: {err.Message}"
                    );
                }
            } catch (Exception ex) {
                errorString = $"Server error. Please try again later";
            }
        }
    }

}