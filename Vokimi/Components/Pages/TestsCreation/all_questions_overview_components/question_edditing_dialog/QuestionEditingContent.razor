@using Vokimi.Components.Pages.TestsCreation.all_questions_overview_components.question_edditing_dialog.editing_content_components.zones

@inject TestsCreationDbOperationsService testsCreationDbOperationsService


@if (!string.IsNullOrEmpty(questionFetchingError)) {
    <p class="server-error">
        @questionFetchingError
    </p>
}
else {
    <div class="dialog-content">
        <button class="close-btn" @onclick="CloseAction">
            <svg viewBox="0 0 384 512">
                <path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z" />
            </svg>
        </button>

        <h3 class="dialog-title">Question Editing</h3>

        <div class="top-input-zone">
            <div class="text-input-area">
                <label for="question-text-label" class="question-text-label">Question Text:</label>
                <textarea id="question-text-input" @bind="data.Text" />
            </div>
            <div class="cover-input-area">
                @if (string.IsNullOrEmpty(data.ImagePath)) {
                    <div class="add-image-button">
                        Add image
                        @*                         <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                <path d="M0 96C0 60.7 28.7 32 64 32H448c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V96zM323.8 202.5c-4.5-6.6-11.9-10.5-19.8-10.5s-15.4 3.9-19.8 10.5l-87 127.6L170.7 297c-4.6-5.7-11.5-9-18.7-9s-14.2 3.3-18.7 9l-64 80c-5.8 7.2-6.9 17.1-2.9 25.4s12.4 13.6 21.6 13.6h96 32H424c8.9 0 17.1-4.9 21.2-12.8s3.6-17.4-1.4-24.7l-120-176zM112 192a48 48 0 1 0 0-96 48 48 0 1 0 0 96z" />
                </svg>
                *@
                    </div>
                }
                else {

                }
            </div>
        </div>
        <SaveButton Onclick="SaveData"/>



        <div class="shuffle-answers-input-line">
            Shuffle Answers:
            <BasicTooltip Text="Shuffle Answers" />
            <CustomCheckbox @bind-Checked="data.ShuffleAnswers" />
        </div>

        <div class="multi-choince-input-line">
            Multiple choice:
            <BasicTooltip Text="If chosen, the sum of the points from the answers will be divided by the count of chosen answers" />
            <CustomCheckbox @bind-Checked="data.IsMultipleChoice" />
        </div>
        <div class="multiple-choice-form-block @showMultipleChoiceCssClass">


            <label for="min-answers-count" class="">Minimum Answers Count:</label>
            <input id="min-answers-count" type="number" @bind="data.MinAnswersCount" />


            <label for="max-answers-count" class="">Maximum Answers Count:</label>
            <input id="max-answers-count" type="number" @bind="data.MaxAnswersCount" />

            <label for="use-average-score" class="">Use Average Score:</label>
            <label class="multi-choice-line">
                Use Average Score:
                <span>tool tip</span>
                <CustomCheckbox @bind-Checked="data.UseAverageScore" />
            </label>

        </div>
        <AnswersZone Answers="@data.Answers" AnswersType="@data.AnswersType" />

    </div>

}
@code {
    private string questionFetchingError = "Error";
    private QuestionEditingForm data;
    private string showMultipleChoiceCssClass => data.IsMultipleChoice ? "show" : "hide";

    [Parameter] public DraftTestQuestionId QuestionId { get; set; }
    [Parameter] public Action CloseAction { get; set; }

    protected override async Task OnParametersSetAsync() {
        DraftTestQuestion? question = await testsCreationDbOperationsService.GetDraftTestQuestionById(QuestionId);
        if (question is null) {
            questionFetchingError = "Question not found";
            return;
        }
        data = QuestionEditingForm.FromDraftTestQuestion(question);
        questionFetchingError = "";
    }
    private void SaveData() {

    }
}
