@using Vokimi.Components.Pages.TestsCreation.all_questions_overview_components.question_edditing_dialog.editing_content_components.zones

@inject TestsCreationDbOperationsService testsCreationDbOperationsService

@if (!string.IsNullOrEmpty(questionFetchingError)) {
    <p class="error-line">
        @questionFetchingError
    </p>
}
else {
    <form class="dialog-content" @onsubmit="SaveData" name="formData">
        <svg viewBox="0 0 64 64" class="close-btn" @onclick="CloseAction" type="button">
            <path d="M62 10.571L53.429 2L32 23.429L10.571 2L2 10.571L23.429 32L2 53.429L10.571 62L32 40.571L53.429 62L62 53.429L40.571 32z"></path>
        </svg>

        <h3 class="dialog-title">Question Editing</h3>

        <div class="top-input-zone">
            <div class="text-input-area">
                <label for="question-text-label" class="question-text-label">Question Text:</label>
                <textarea id="question-text-input" @bind="formData.Text" />
            </div>
            <div class="cover-input-area">
                @if (string.IsNullOrEmpty(formData.ImagePath)) {
                    <div class="add-image-button">
                        Add image
                    </div>
                }
                else {

                }
            </div>
        </div>

        <div class="shuffle-answers-input-line">
            Shuffle Answers:
            <BasicTooltip Text="Shuffle Answers" />
            <CustomCheckbox @bind-Checked="formData.ShuffleAnswers" />
        </div>

        <IsMultipleChoiceZone FormData="formData" />

        <AnswersZone Answers="@formData.Answers" AnswersType="@formData.AnswersType" />

        <p class="error-line">@savingError</p>
        <SaveButton Onclick="SaveData" />
    </form>
}

@code {
    private string questionFetchingError = "Error";
    private string savingError = string.Empty;
    [SupplyParameterFromForm]
    public QuestionEditingForm formData { get; set; }

    [Parameter] public DraftTestQuestionId QuestionId { get; set; }
    [Parameter] public Action CloseAction { get; set; }

    protected override async Task OnParametersSetAsync() {
        DraftTestQuestion? question = await testsCreationDbOperationsService.GetDraftTestQuestionById(QuestionId);
        if (question is null) {
            questionFetchingError = "Question not found";
            return;
        }
        formData = QuestionEditingForm.FromDraftTestQuestion(question);
        questionFetchingError = "";
    }

    private async void SaveData() {
        savingError = string.Empty;
        Err formErr = formData.Validate();

        if (formErr.NotNone()) {
            savingError = formErr.Message;
            return;
        }

        Err err = await testsCreationDbOperationsService.UpdateDraftTestQuestion(QuestionId, formData);
        if (err.NotNone()) {
            savingError = err.Message;
        }
    }
}
