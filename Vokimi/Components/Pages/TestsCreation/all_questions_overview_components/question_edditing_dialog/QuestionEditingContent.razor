@inject TestsCreationDbOperationsService testsCreationDbOperationsService


@if (!string.IsNullOrEmpty(questionFetchingError)) {
    <p class="server-error">
        @questionFetchingError
    </p>
}
else {
    <div class="dialog-content">
        <h3 class="dialog-title">Question Editing</h3>

        <div class="top-input-zone">
            <div class="text-input-area">
                <label for="question-text-label" class="question-text-label">Question Text:</label>
                <textarea id="question-text-input" @bind="data.Text" />
            </div>
            <div class="cover-input-area">
                @if (string.IsNullOrEmpty(data.ImagePath)) {
                    <div class="add-image-button">
                    </div>
                }
                else {

                }
            </div>
        </div>




        <div class="shuffle-answers-input-line">
            Shuffle Answers:
            <span>tool tip</span>
            <CustomCheckbox @bind-Checked="data.ShuffleAnswers" />
        </div>

        <div class="multi-choince-input-line">
            Multiple choice:
            <span>tool tip</span>
            <CustomCheckbox @bind-Checked="data.IsMultipleChoice" />
        </div>
        <div class="multiple-choice-form-block @showMultipleChoiceCssClass">


            <label for="min-answers-count" class="">Minimum Answers Count:</label>
            <input id="min-answers-count" type="number" @bind="data.MinAnswersCount" />


            <label for="max-answers-count" class="">Maximum Answers Count:</label>
            <input id="max-answers-count" type="number" @bind="data.MaxAnswersCount" />

            <label for="use-average-score" class="">Use Average Score:</label>
            <label class="multi-choice-line">
                Use Average Score:
                <span>tool tip</span>
                <CustomCheckbox @bind-Checked="data.UseAverageScore" />
            </label>

        </div>
        <label class="answers-count-label">Question Answers (@data.Answers.Count)</label>
        @* answers *@
    </div>
    <div class="bottom-btns-container">
        <div class="cancel-btn" @onclick="CloseAction">Cancel</div>
        <div class="save-btn">Save</div>
    </div>
}
@code {
    private string questionFetchingError = "Error";
    private QuestionEditingForm data;
    private string showMultipleChoiceCssClass => data.IsMultipleChoice ? "show" : "hide";

    [Parameter] public DraftTestQuestionId QuestionId { get; set; }
    [Parameter] public Action CloseAction { get; set; }

    protected override async Task OnParametersSetAsync() {
        DraftTestQuestion? question = await testsCreationDbOperationsService.GetDraftTestQuestionById(QuestionId);
        if (question is null) {
            questionFetchingError = "Question not found";
            return;
        }
        data = QuestionEditingForm.FromDraftTestQuestion(question);
        questionFetchingError = "";

    }
}
