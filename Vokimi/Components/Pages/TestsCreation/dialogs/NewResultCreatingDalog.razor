@using System.Text.RegularExpressions

@inject TestsCreationDbOperationsService testsCreationDbOperationsService

<BaseDialog DialogId="@id" @ref="baseDialogRef">
    <div class="dialog-content">
        <input @bind="resultId" placeholder="Type new result id" name="@Guid.NewGuid()" class="result-id-input" />
        <p class="error-string">@errorMessage</p>
        <div class="bottom-btns-container">
            <button @onclick="Close">Cancel</button>
            <button @onclick="SaveNewResult">Add</button>
        </div>
    </div>
</BaseDialog>

@code {
    [CascadingParameter(Name = "TestId")] public DraftTestId TestId { get; set; }

    private readonly string id = "new-result-dialog";
    private BaseDialog baseDialogRef;
    private string errorMessage;
    private string resultId;

    private async Task Close() => await baseDialogRef.CloseAsync();
    public async Task Open() =>
        await baseDialogRef.OpenAsync();

    private readonly Regex ResultStringIdValidatingRegex = new("^[a-zA-Z0-9_-]+$");


    private async void SaveNewResult() {
        resultId = resultId.Trim();
        if (
            string.IsNullOrEmpty(resultId) ||
            resultId.Length > TestCreationConsts.ResultMaxCharacters ||
            resultId.Length < TestCreationConsts.ResultMinCharacters) {

            errorMessage =
                $"Result id must be between {TestCreationConsts.ResultMinCharacters} and {TestCreationConsts.ResultMaxCharacters} characters";
            StateHasChanged();
            return;
        }

        if (!ResultStringIdValidatingRegex.IsMatch(resultId)) {
            errorMessage = "Result id can only contain letters, numbers, underscores, and hyphens";
            StateHasChanged();
            return;
        }
        (await testsCreationDbOperationsService.GetResultStringIdsForDraftTest(TestId)).Switch(
            async list => {
                if (list.Contains(resultId)) {
                    errorMessage = "Result with such id already exists";
                    StateHasChanged();
                    return;
                }
                else {
                    Err err = await testsCreationDbOperationsService.CreateNewDraftTestResult(TestId, resultId);
                    if (err.NotNone()) { errorMessage = err.ToString(); }
                    else { await Close(); }
                }
            },
            err => {
                errorMessage = err.ToString();
                StateHasChanged();
            }
        );
    }

}
