@inject TestsCreationDbOperationsService testsCreationDbOperationsService
@inject UsersDbOperationsService usersDbOperationsService
@inject AuthHelperService authHelperService

@attribute [Authorize]
@page "/newtest"
@page "/newtest/{testId}"
<PageTitle>New Test</PageTitle>

<h1>Test creation page</h1>

@if (!string.IsNullOrEmpty(pageInitializationError)) {
    <p>@pageInitializationError</p>
}
else {
    @switch (pageState) {
        case PageState.Overview:
            <TestOverview></TestOverview>
            break;
        case PageState.MainInfoEditing:
            <MainInfoEditing></MainInfoEditing>
            break;
        default:
            <h2>default state</h2>
            break;
    }
}

@code {
    [Parameter]
    public string TestId { get; set; } = string.Empty;

    [CascadingParameter]
    public HttpContext httpContext { get; set; }

    private string pageInitializationError = string.Empty;
    private PageState pageState { get; set; } = PageState.MainInfoEditing;
    private Guid? parsedTestId = null;

    private enum PageState
    {
        Overview,
        MainInfoEditing,
        QuestionCreation,
        Results,
        Styles,
        TagsAdding
    }

    protected override async Task OnInitializedAsync() {

        pageInitializationError = string.Empty;

        if (!Guid.TryParse(TestId, out Guid parsedGuid)) {
            pageInitializationError = "Invalid test ID format.";
            return;
        }
        parsedTestId = parsedGuid;

        AppUserId? userId = authHelperService.GetUserIdFromClaims(httpContext.User);
        if (userId is null) {
            pageInitializationError = "An error has occurred. Try to log out of your account and log in again.";
            return;
        }

        AppUser? user = await usersDbOperationsService.GetUserById(userId.Value);
        if (user is null) {
            pageInitializationError = "An error has occurred. Try to log out of your account and log in again.";
            return;
        }

        // if (!user.DraftTests.Contains(parsedTestId.Value)) {
        //     pageInitializationError = "You have no rights to change this test.";
        //     return;
        // }

        LoadTestData(parsedTestId.Value);

    }

    private void LoadTestData(Guid testId) {
    }
}
