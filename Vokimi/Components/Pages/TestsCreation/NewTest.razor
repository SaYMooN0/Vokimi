@inject TestsCreationDbOperationsService testsCreationDbOperationsService
@inject UsersDbOperationsService usersDbOperationsService
@inject AuthHelperService authHelperService
@inject NavigationManager navigationManager

@page "/newtest"
@page "/newtest/{testId}"


<PageTitle>New Test</PageTitle>
<div class="error-component">@pageInitializationError"</div>

@code {
    [Parameter]
    public string TestId { get; set; } = string.Empty;


    [CascadingParameter]
    public HttpContext httpContext { get; set; }

    private string pageInitializationError = string.Empty;
    private DraftTestId? parsedTestId = null;


    protected override async Task OnInitializedAsync() {

        pageInitializationError = string.Empty;

        if (!Guid.TryParse(TestId, out Guid parsedGuid)) {
            pageInitializationError = "Invalid test ID format.";
            return;
        }
        parsedTestId = new(parsedGuid);

        AppUserId? userId = authHelperService.GetUserIdFromClaims(httpContext.User);
        if (userId is null) {
            pageInitializationError = "An error has occurred. Try to log out of your account and log in again.";
            return;
        }

        AppUser? user = await usersDbOperationsService.GetUserById(userId.Value);
        if (user is null) {
            pageInitializationError = "An error has occurred. Try to log out of your account and log in again.";
            return;
        }
        var test = await testsCreationDbOperationsService.GetDraftTestById(parsedTestId.Value);
        if (test is null) {
            pageInitializationError = "Unknown test";
            return;
        }
        navigationManager.NavigateTo($"/newtest/{test.Template.ShortId()}/{parsedTestId.Value}");

    }
}


