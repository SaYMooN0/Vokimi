@rendermode InteractiveServer

<EditForm Model="@testMainInfo" OnValidSubmit="HandleValidSubmit" FormName="testMainInfoForm">
    <DataAnnotationsValidator />
    <div class="form-content">
        <label for="name" class="form-label">Test name:</label>
        <InputText id="name" class="form-control" @bind-Value="testMainInfo.Name" />



        <label for="description" class="form-label">Test Description (Optional):</label>
        <InputTextArea id="description" class="form-control" @bind-Value="testMainInfo.Description" />

        <label for="language" class="form-label">Language</label>
        <InputSelect id="language" class="form-control" @bind-Value="testMainInfo.Language">
            @foreach (Language lang in Enum.GetValues(typeof(Language))) {
                <option value="@lang">@lang</option>
            }
        </InputSelect>



        <label for="privacy" class="form-label">Privacy</label>
        <InputSelect id="privacy" class="form-control" @bind-Value="testMainInfo.Privacy">
            @foreach (TestPrivacy privacy in Enum.GetValues(typeof(TestPrivacy))) {
                <option value="@privacy">@privacy</option>
            }
        </InputSelect>


        <button type="submit" class="save-btn">Save</button>
    </div>

</EditForm>
@code {

    [SupplyParameterFromForm]
    public TestMainInfoEditingForm testMainInfo { get; set; } = new();
    [Parameter]
    public DraftGenericTestDto Test { get; set; }

    protected override async Task OnParametersSetAsync() {
        await base.OnParametersSetAsync();
        testMainInfo = TestMainInfoEditingForm.FromTestMainInfoDto(Test.MainInfo);
        if (string.IsNullOrEmpty(testMainInfo.Cover)) {
            testMainInfo.Cover = ImgOperationsHelper.DefaultTestCoverImg;
        }

    }


    private void HandleValidSubmit() {

    }
}
