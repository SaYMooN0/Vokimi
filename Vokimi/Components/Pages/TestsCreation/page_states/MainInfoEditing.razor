@inject VokimiStorageService vokimiStorageService

@rendermode InteractiveServer

<EditForm Model="@testMainInfo" OnValidSubmit="HandleValidSubmit" FormName="testMainInfoForm">
    <DataAnnotationsValidator />
    <div class="form-container">

        <label for="name" class="form-label">Test name:</label>
        <InputText id="name" class="form-control" @bind-Value="testMainInfo.Name" />



        <label for="description" class="form-label">Test Description (Optional):</label>
        <InputTextArea id="description" class="form-control" @bind-Value="testMainInfo.Description" />



        <label for="cover" class="form-label">Test Cover</label>
        <InputFile id="cover" class="form-control" OnChange="HandleFileChange" />
        <img class="chosen-cover-viewer" src="@ImageViewerController.ImgUrl(testMainInfo.Cover)" />
        <label class="cover-error">@coverUploadingError</label>


        <label for="language" class="form-label">Language</label>
        <InputSelect id="language" class="form-control" @bind-Value="testMainInfo.Language">
            @foreach (Language lang in Enum.GetValues(typeof(Language))) {
                <option value="@lang">@lang</option>
            }
        </InputSelect>



        <label for="privacy" class="form-label">Privacy</label>
        <InputSelect id="privacy" class="form-control" @bind-Value="testMainInfo.Privacy">
            @foreach (TestPrivacy privacy in Enum.GetValues(typeof(TestPrivacy))) {
                <option value="@privacy">@privacy</option>
            }
        </InputSelect>


        <button type="submit" class="save-btn">Save</button>
    </div>

</EditForm>
@code {
    private string coverUploadingError = string.Empty;

    [SupplyParameterFromForm]
    public TestMainInfoEditingForm testMainInfo { get; set; } = new();
    [Parameter]
    public DraftGenericTestDto Test { get; set; }

    protected override async Task OnParametersSetAsync() {
        await base.OnParametersSetAsync();
        testMainInfo =TestMainInfoEditingForm.FromTestMainInfoDto(Test.MainInfo);
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e) {
        var file = e.File;
        if (file != null) {
            try {
                using (var stream = file.OpenReadStream(maxAllowedSize: 10240000)) { /* 10MB */
                    var result = await vokimiStorageService.SaveDraftTestCover(Test.Id, stream);
                    result.Switch(
                        path => {
                            testMainInfo.Cover = path;
                            coverUploadingError = string.Empty;
                        },
                        err => coverUploadingError = $"Error uploading cover: {err.Message}"
                    );
                }
            } catch (Exception ex) {
                coverUploadingError = $"Error: {ex.Message}";
            }
        }
    }



    private void HandleValidSubmit() {

    }
}
