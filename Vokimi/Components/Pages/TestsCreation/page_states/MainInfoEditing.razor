@inject TestsCreationDbOperationsService testsCreationDbOperationsService

@rendermode InteractiveServer


<form name="formData" @onsubmit="HandleSubmit">
    <div class="form-content">
        <label for="name" class="form-label">Test name:</label>
        <input id="name" class="form-control" @bind="formData.Name" />

        <label for="description" class="form-label">Test Description (Optional):</label>
        <textarea id="description" class="form-control" @bind="formData.Description"></textarea>

        <label for="language" class="form-label">Language</label>
        <select id="language" class="form-control" @bind="formData.Language">
            @foreach (var lang in availableLanguges) {
                <option value="@lang.Key">@lang.Value</option>
            }
        </select>

        <label for="privacy" class="form-label">Privacy</label>
        <select id="privacy" class="form-control" @bind="formData.Privacy">
            @foreach (TestPrivacy privacy in Enum.GetValues(typeof(TestPrivacy))) {
                <option value="@privacy">@privacy</option>
            }
        </select>
        <p class="validation-error">
            @formValidationMessage
        </p>
        <div class="bottom-buttons-container">
            <button type="button" class="cancel-button" @onclick="BackToOverviewAction">Cancel</button>
            <button type="submit" class="save-btn">Save</button>
        </div>
    </div>
</form>
@code {
    private Dictionary<Language, string> availableLanguges;
    private string formValidationMessage = string.Empty;

    [SupplyParameterFromForm]
    public TestMainInfoEditingForm formData { get; set; } = new();
    [Parameter]
    public DraftGenericTestDto Test { get; set; }
    [Parameter]
    public Action BackToOverviewAction { get; set; }

    protected override async Task OnParametersSetAsync() {
        await base.OnParametersSetAsync();
        formData = TestMainInfoEditingForm.FromTestMainInfoDto(Test.MainInfo);
        IEnumerable<Language> languages = Enum.GetValues(typeof(Language)).Cast<Language>();
        availableLanguges = languages.ToDictionary(l => l, l => l.FullName());
    }


    private async void HandleSubmit() {
        Err serverErr = formData.Validate();
        if (serverErr.NotNone()) {
            formValidationMessage = serverErr.ToString();
            return;
        }
        serverErr = await testsCreationDbOperationsService
            .UpdateDraftTestMainInfo(Test.MainInfo.Id, formData.Name, formData.Description, formData.Language, formData.Privacy);
        if (serverErr.NotNone()) {
            formValidationMessage = serverErr.ToString();
            return;
        }
        BackToOverviewAction();
    }
}
