@using Vokimi.Components.Pages.TestsCreation.page_states.shared_components
@using Vokimi.Components.Pages.TestsCreation.results_creation_components

@inject TestsCreationDbOperationsService testsCreationDbOperationsService


<form class="results-editing-form" @onsubmit="HandleSubmit">
    <TestCreationPageStateTopLabel LabelText="Results Editing" BackToOverviewAction="BackToOverviewAction" />
    <div class="saved-results-label results-section-label">
        Saved Results
        <div class="collapse-all-btn" @onclick="CollapseAllSavedResults">Collapse all</div>
    </div>
    @foreach (var r in formData.SavedResults) {
        <ResultEditingComponent @ref="AddSavedResultWrapperRef"
                                ResultForm="r"
                                RemoveResultAction="()=>{}">
            <label>@r.StringId</label>
        </ResultEditingComponent>
    }
    <div class="results-section-label">
        New Results:
        <div class="collapse-all-btn" @onclick="CollapseAllNotSavedResults">Collapse all</div>
    </div>
    @foreach (var r in formData.NotSavedResults) {
        <ResultEditingComponent @ref="AddNotSavedResultWrapperRef"
                                ResultForm="r"
                                RemoveResultAction="()=>{}">
            <label class="result-id-input-label">
                Result id: <input type="text" />
            </label>
        </ResultEditingComponent>
    }
    <div class="new-result-btn">New result</div>
    <p class="error-message">@errorMessage</p>
    <button type="submit">Save</button>
</form>

@code {
    private string errorMessage = string.Empty;

    [Parameter] public Action BackToOverviewAction { get; set; }

    [CascadingParameter(Name = "TestID")] public DraftTestId TestId { get; set; }

    private TestResultsEditingForm formData = TestResultsEditingForm.Empty;

    ResultEditingComponent AddSavedResultWrapperRef
    { set => savedResultsWrapperRefs.Add(value); }
    private List<ResultEditingComponent> savedResultsWrapperRefs = new();

    ResultEditingComponent AddNotSavedResultWrapperRef
    { set => notSavedResultsWrapperRefs.Add(value); }
    private List<ResultEditingComponent> notSavedResultsWrapperRefs = new();

    protected override async Task OnInitializedAsync() {
        Err err = await FetchFormData();
        if (err.NotNone()) {
            errorMessage = err.Message;
        }
        await base.OnInitializedAsync();
    }
    private async void HandleSubmit() {
        //save to db

        // await FetchFormData();
        // StateHasChanged();
    }
    private async Task<Err> FetchFormData() {
        BaseDraftTest? test = await testsCreationDbOperationsService.GetDraftTestById(TestId);
        if (test is null) {
            formData = TestResultsEditingForm.Empty;
            return new Err("Error fetching results data");
        }
        formData = TestResultsEditingForm.FromDraftTest(test);
        return Err.None;
    }
    public void CollapseAllSavedResults() {
        foreach (var wrapperRef in savedResultsWrapperRefs) {
            wrapperRef.Hide();
        }
    }
    public void CollapseAllNotSavedResults() {
        foreach (var wrapperRef in notSavedResultsWrapperRefs) {
            wrapperRef.Hide();
        }
    }
}
