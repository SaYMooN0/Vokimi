@using Vokimi.Components.Pages.TestsCreation.page_states.shared_components
@using Vokimi.Components.Pages.TestsCreation.results_creation_components

@inject IDbContextFactory<VokimiDbContext> dbContextFactory
@inject VokimiStorageService vokimiStorageService

<TestCreationPageStateTopLabel LabelText="Results Editing" BackToOverviewAction="BackToOverviewAction" />


<form class="results-editing-form">
    <div class="results-section-label">
        Results:
        <div class="collapse-all-btn" @onclick="CollapseAllResultComponents">Collapse all</div>
    </div>
    @foreach (var r in resultForms) {

        <ResultEditingComponent @ref="AddSavedResultWrapperRef"
                                ResultForm="r"
                                RemoveResultAction="()=>{resultForms.Remove(r); StateHasChanged();}">
            <label class="result-name-input-label">
                Result Name: <input @bind="r.Name" type="text" />
            </label>
        </ResultEditingComponent>
    }
    <div class="new-result-btn" @onclick="AddNewResult">New result</div>
    <p class="error-message">@errorMessage</p>
    <SaveButton Onclick="HandleSubmit" Text="Save Results" />
</form>


@code {
    private string errorMessage = string.Empty;

    [Parameter] public Action BackToOverviewAction { get; set; }

    [CascadingParameter(Name = "TestId")] public DraftTestId TestId { get; set; }

    private List<ResultEditingForm> resultForms = [];

    ResultEditingComponent AddSavedResultWrapperRef
    { set => resultEditingComponentRefs.Add(value); }
    private List<ResultEditingComponent> resultEditingComponentRefs = new();


    protected override async Task OnInitializedAsync() {
        Err err = await FetchResultForms();
        if (err.NotNone()) {
            errorMessage = err.Message;
        }
        await base.OnInitializedAsync();
    }
    private async void HandleSubmit() {
        Err validationErr = ValidateForm();
        if (validationErr.NotNone()) {
            errorMessage = validationErr.Message;
            StateHasChanged();
            return;
        }
        using (var dbContext = dbContextFactory.CreateDbContext()) {
            Err savingErr = await BaseTestsCreationDbOperations
                    .UpdateDraftTestResults(dbContext, TestId, resultForms);

            if (savingErr.NotNone()) {
                errorMessage = savingErr.Message;
                StateHasChanged();
                return;
            }
        }


        errorMessage = string.Empty;
        await FetchResultForms();

        StateHasChanged();
        var usedImageKeys = resultForms
            .Select(r => r.ImagePath)
            .Where(s => !string.IsNullOrEmpty(s));
        await vokimiStorageService.ClearUnusedDraftTestResultsImages(TestId, usedImageKeys);



    }
    private async Task<Err> FetchResultForms() {
        using (var dbContext = dbContextFactory.CreateDbContext()) {
            BaseDraftTest? test = await dbContext.DraftTestsSharedInfo.FirstOrDefaultAsync(t => t.Id == TestId);
            if (test is null) {
                return new Err("Error fetching results data");
            }
            else {
                resultForms = test.PossibleResults.Select(ResultEditingForm.FromDraftTestResult).ToList();
                return Err.None;
            }

        }
    }
    public void CollapseAllResultComponents() {
        foreach (var wrapperRef in resultEditingComponentRefs) {
            wrapperRef.Hide();
        }
    }
    private Err ValidateForm() {
        List<string> usedNames = [];
        for (int i = 0; i < resultForms.Count(); i++) {
            if (string.IsNullOrWhiteSpace(resultForms[i].Name)) {
                return new Err("Error: Result name cannot be empty");
            }
            string resErrorPref = $"Result '{resultForms[i].Name}' has error: ";
            if (usedNames.Contains(resultForms[i].Name)) {
                return new Err(resErrorPref + "There is already result with this name");
            }
            if (resultForms[i].Name.Length < BaseTestCreationConsts.ResultNameMinCharacters) {
                return new Err(resErrorPref + $"Result name cannot be less than {BaseTestCreationConsts.ResultNameMinCharacters} characters");
            }
            if (resultForms[i].Name.Length > BaseTestCreationConsts.ResultNameMaxCharacters) {
                return new Err(resErrorPref + $"Result name cannot be more than {BaseTestCreationConsts.ResultNameMaxCharacters} characters");
            }
            usedNames.Add(resultForms[i].Name);
            int textLength = string.IsNullOrWhiteSpace(resultForms[i].Text) ? 0 : resultForms[i].Text.Length;
            if (textLength < BaseTestCreationConsts.ResultMinTextLength || textLength > BaseTestCreationConsts.ResultMaxTextLength) {
                return new Err(resErrorPref + $"Text of the result is {textLength} characters long. The length must be " +
                    $"from {BaseTestCreationConsts.ResultMinTextLength} to {BaseTestCreationConsts.ResultMaxTextLength} characters");
            }

        }
        return Err.None;
    }
    private void AddNewResult() {
        resultForms.Add(ResultEditingForm.Empty);
        StateHasChanged();
    }
}
