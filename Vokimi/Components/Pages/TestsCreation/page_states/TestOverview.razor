@using static Vokimi.Components.Pages.TestsCreation.pages_with_templates.NewTestGeneric
@inject TestsCreationDbOperationsService testsCreationDbOperationsService
@inject VokimiStorageService vokimiStorageService

@rendermode InteractiveServer

<div class="state-container">
    <div class="top-container">
        <div class="main-info-area">
            <label class="top-container-label">Test Main Info</label>
            <div class="test-main-info-text">
                <p>@vm.Name</p>
                <p>
                    Description:<br /> <span class="test-description">@vm.Description</span>
                </p>
                <p>
                    Language:<span>@vm.Language</span>
                </p>
                <p>
                    Privacy:<span>@vm.Privace</span>
                </p>
            </div>
            <div class="edit-main-info-btn" @onclick="() => ChangePageState.InvokeAsync(TestCreationPageState.MainInfoEditing)">
                Edit Main Info
                <svg viewBox="0 0 512 512">
                    <path d="M441 58.9L453.1 71c9.4 9.4 9.4 24.6 0 33.9L424 134.1 377.9 88 407 58.9c9.4-9.4 24.6-9.4 33.9 0zM209.8 256.2L344 121.9 390.1 168 255.8 302.2c-2.9 2.9-6.5 5-10.4 6.1l-58.5 16.7 16.7-58.5c1.1-3.9 3.2-7.5 6.1-10.4zM373.1 25L175.8 222.2c-8.7 8.7-15 19.4-18.3 31.1l-28.6 100c-2.4 8.4-.1 17.4 6.1 23.6s15.2 8.5 23.6 6.1l100-28.6c11.8-3.4 22.5-9.7 31.1-18.3L487 138.9c28.1-28.1 28.1-73.7 0-101.8L474.9 25C446.8-3.1 401.2-3.1 373.1 25zM88 64C39.4 64 0 103.4 0 152V424c0 48.6 39.4 88 88 88H360c48.6 0 88-39.4 88-88V312c0-13.3-10.7-24-24-24s-24 10.7-24 24V424c0 22.1-17.9 40-40 40H88c-22.1 0-40-17.9-40-40V152c0-22.1 17.9-40 40-40H200c13.3 0 24-10.7 24-24s-10.7-24-24-24H88z" />
                </svg>
            </div>
        </div>
        <div class="test-cover-area">
            <label class="top-container-label">Test Cover</label>
            <div class="test-cover">
                <img src="@GetImageUrl(vm.CoverPath)" alt="Test Cover" />
            </div>

            <InputFile id="cover" class="form-control" OnChange="HandleFileChange" accept=".jpg,.png,.webp" hidden />
            <label class="cover-error">@coverUploadingError</label>
            <label for="cover" class="change-btn">Change</label>
            <div class="remove-btn" @onclick="HandleCoverRemoving">Remove</div>
        </div>
    </div>

    <div class="questions-area">
        <label class="questions-count-label">@vm.Questions.Count</label>
        @foreach (var q in vm.Questions) {
            <div class="question-view-component">
                <label class="question-text">@q.Text</label>
                <label class="answers-count">Answers count: @q.AnswersCount (@(q.IsMultiAnswer ? "Multi-Answer" : "Single-Answer"))</label>
                <div class="possible-points-info">
                    <label>Possible Points</label>
                    <div class="min-max-container">
                        <span>Min: @q.MinPossiblePoints</span>
                        <span>Max: @q.MaxPossiblePoints</span>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="conclusion-area">
        Add Test Conclusion(Optional)
        <button>Add</button>
    </div>
    <div class="styles-area">
        Change Test Styles(Optional)
        <button>Change</button>
    </div>
</div>

@code {
    private string coverUploadingError = string.Empty;
    private TestCreationOverviewViewModel vm { get; set; }
    private string imageUrl { get; set; }

    [Parameter]
    public DraftGenericTestDto Test { get; set; }
    [Parameter]
    public EventCallback<TestCreationPageState> ChangePageState { get; set; }

    protected override void OnParametersSet() {
        base.OnParametersSet();
        vm = TestCreationOverviewViewModel.FromTestDto(Test);
        imageUrl = GetImageUrl(vm.CoverPath); // Initialize image URL
    }

    private string GetImageUrl(string path) {
        return $"{ImgOperationsHelper.ImgUrl(path)}?v={Guid.NewGuid()}";
    }

    private async void HandleCoverRemoving() {
        Err err = await testsCreationDbOperationsService.UpdateTestCover(Test.MainInfo.Id, ImgOperationsHelper.DefaultTestCoverImg);
        if (err.NotNone()) {
            coverUploadingError = err.ToString();
        }
        else {
            vm.CoverPath = ImgOperationsHelper.DefaultTestCoverImg;
            StateHasChanged();
        }
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e) {
        var file = e.File;
        int maxAllowedSize = 3145728; /* 3MB */

        if (file is not null) {
            if (file.Size > maxAllowedSize) {
                coverUploadingError = $"File is too big. Max allowed size: 3MB";
                return;
            }
            try {
                using (var stream = file.OpenReadStream(maxAllowedSize: maxAllowedSize)) {
                    var result = await vokimiStorageService.SaveDraftTestCover(Test.Id, stream);
                    result.Switch(
                        async path => {
                            Err err = await testsCreationDbOperationsService.UpdateTestCover(Test.MainInfo.Id, path);
                            if (err.NotNone()) {
                                coverUploadingError = err.ToString();
                            }
                            else {
                                vm.CoverPath = path;
                                StateHasChanged();
                            }
                        },
                        err => coverUploadingError = $"Error uploading cover: {err.Message}"
                    );

                }
            } catch (Exception ex) {
                coverUploadingError = $"Server error. Please try again later";
            }
        }
    }
}
