@using Vokimi.Components.Pages.TestsCreation.page_states.shared_components


@inject VokimiStorageService vokimiStorageService
@inject TestsCreationDbOperationsService testsCreationDbOperationsService

<form class="form-container" name="formData" @onsubmit="HandleSubmit">
    <TestCreationPageStateTopLabel LabelText="Test Conclusion Editing" BackToOverviewAction="BackToOverviewAction" />
    <div class="top-inputs-zone">
        <TextAndImageMainInputs @bind-Text="formData.Text"
                                @bind-ImagePath="formData.ImagePath"
                                SaveImgFunc="ImgSavingFunc"
                                TextInputLabel="Conclusion Text:"/>

    </div>
    <div class="add-feedback-zone">
        <label class="add-feedback-label">
            Add feedback
            <CustomCheckbox @bind-Checked="formData.AddFeedback" />
        </label>

        <div class="multiple-choice-only-form-block @(formData.AddFeedback? "show-feedback":"hide-feedback")">
            <label class="feedback-text-input-label">
                Accompanying text:
                <input type="text" @bind="@formData.FeedbackText" />
            </label>
            <label class="feedback-chars-count-label">
                Maximum number of characters in feedback:
                <input type="number" @bind="@formData.MaxCharactersForFeedback"
                       max="@BaseTestCreationConsts.ConclusionMaxFeedbackCharsCount" />
            </label>
        </div>

    </div>
    <p class="saving-error">@serverError</p>
    <button type="submit" class="submit-button">Save</button>
</form>


@code {
    [SupplyParameterFromForm]
    public ConclusionCreationForm formData { get; set; } = new();

    [CascadingParameter(Name = "TestId")] public DraftTestId TestId { get; set; }
    [Parameter] public Action BackToOverviewAction { get; set; }

    private string imageUploadingErr = string.Empty;
    private string serverError = string.Empty;

    protected override async Task OnInitializedAsync() {
        TestConclusion? conclusion = await testsCreationDbOperationsService.GetDraftTestConclusionById(TestId);
        if (conclusion is not null) {
            formData = ConclusionCreationForm.FromConclusion(conclusion);
        }
        else {
            formData = new();
        }
        await base.OnInitializedAsync();
    }
    private async void HandleSubmit() {
        Err validationError = Validate(formData);
        if (validationError.NotNone()) {
            serverError = validationError.Message;
            StateHasChanged();
            return;
        }
        Err savingError = await testsCreationDbOperationsService.UpdateDraftTestConclusion(TestId, formData);
        if (savingError.NotNone()) {
            serverError = savingError.Message;
            StateHasChanged();
            return;
        }
        await vokimiStorageService.ClearDraftTestConclusionUnusedImages(TestId, formData.ImagePath);
    }
    private string imgSessionKey = Guid.NewGuid().ToString();

    private async Task<OneOf.OneOf<string, Err>> ImgSavingFunc(Stream imgStream) =>
        await vokimiStorageService.SaveDraftTestConclusionImage(imgStream, TestId, imgSessionKey);

    private Err Validate(ConclusionCreationForm form) {
        if (string.IsNullOrWhiteSpace(form.Text)) {
            return new Err("Text field cannot be empty");
        }
        if (form.Text.Length > BaseTestCreationConsts.ConclusionMaxCharsInText) {
            return new Err($"Conclusion text cannot be longer than {BaseTestCreationConsts.ConclusionMaxCharsInText} characters");
        }
        if (form.AddFeedback && string.IsNullOrWhiteSpace(form.FeedbackText)) {
            return new Err("Please fill Feedback 'Accompanying text' field");
        }
        if (form.AddFeedback && form.FeedbackText.Length > BaseTestCreationConsts.ConclusionMaxAccompanyingFeedbackTextChars) {
            return new Err($"Feedback 'Accompanying text' cannot be more than {BaseTestCreationConsts.ConclusionMaxAccompanyingFeedbackTextChars} long");
        }
        if (form.AddFeedback && form.MaxCharactersForFeedback > BaseTestCreationConsts.ConclusionMaxFeedbackCharsCount) {
            return new Err($"Maximum number of characters in feedback cannot be more than {BaseTestCreationConsts.ConclusionMaxFeedbackCharsCount}");
        }
        return Err.None;
    }
}