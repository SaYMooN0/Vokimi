@using Vokimi.Components.Pages.TestsCreation.test_publishing_components

@inject IDbContextFactory<VokimiDbContext> dbContextFactory

@rendermode InteractiveServer

@switch (publisingState) {
    case PublisingState.ProblemsChecking:
        <CheckingForProblemsComponents BackToOverviewAction="BackToOverviewAction"
                                       ChangeToTagsAddingAction="()=> publisingState=PublisingState.TagsAdding" />
        break;
    case PublisingState.TagsAdding:
        <AddingTagsToTestComponent PublishWithTagsAction="PublishWithTagsAction"
                                   BackToErrorsCheckingAction="()=> publisingState=PublisingState.ProblemsChecking" />
        break;
    case PublisingState.PublishingError:
        <PublishingErrorComponent />
        break;
    case PublisingState.SuccessfullyPublished:
        <SuccessfullyPublishedComponent />
        break;
    default:
        throw new NotImplementedException();
}





@code {

    [CascadingParameter(Name = "TestId")] public DraftTestId TestId { get; set; }
    [Parameter] public Action BackToOverviewAction { get; set; }

    private enum PublisingState
    {
        ProblemsChecking,
        TagsAdding,
        PublishingError,
        SuccessfullyPublished
    }
    private PublisingState publisingState;

    private async Task<Err> PublishWithTagsAction(List<string> tags) {
        using (var dbContext = dbContextFactory.CreateDbContext()) {

            DraftGenericTest? test = await dbContext.DraftGenericTests.FirstOrDefaultAsync(i => i.Id == TestId);
            if (test is null) {
                return new Err("Unknown test");
            }
            string testCover = test.MainInfo.CoverImagePath;
            return (await GenericTestsPublishingDbOperations.PublishGenericDraftTest(dbContext, test)).Match(
                publishedTest => {
                    //update testCover, question and results 
                    //RemoveDraftTestEntries
                    //assign tags
                    return Err.None;
                }, err => err);
        }
    }

}
