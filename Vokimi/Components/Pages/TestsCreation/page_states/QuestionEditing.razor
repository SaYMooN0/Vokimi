@using Vokimi.Components.Pages.TestsCreation.question_editing_components.zones


@inject TestsCreationDbOperationsService testsCreationDbOperationsService
@inject VokimiStorageService vokimiStorageService

@if (!string.IsNullOrEmpty(questionFetchingError)) {
    <p class="error-line">
        @questionFetchingError
    </p>
}
else {
    <div class="dialog-content">
        <div class="dialog-header">
            <div class="go-back-btn" @onclick="GoBackAction">
                <svg viewBox="0 0 448 512">
                    <path d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z" />
                </svg>
                Go Back
            </div>
            Question Editing
        </div>
        <form class="form-content" @onsubmit="SaveData" name="formData">
            <div class="top-input-zone">
                <div class="text-input-area">
                    <label for="question-text-label" class="question-text-label">Question Text:</label>
                    <textarea id="question-text-input" @bind="formData.Text" />
                </div>
                <div class="cover-input-area">
                    @if (string.IsNullOrEmpty(formData.ImagePath)) {
                        <div class="add-image-button">
                            Add image
                        </div>
                    }
                    else {

                    }
                </div>
            </div>

            <div class="shuffle-answers-input-line">
                Shuffle Answers:
                <BasicTooltip Text="Shuffle Answers" />
                <CustomCheckbox @bind-Checked="formData.ShuffleAnswers" />
            </div>

            <IsMultipleChoiceZone FormData="formData" />

            <AnswersZone Answers="@formData.Answers" AnswersType="@formData.AnswersType" QuestionId="@QuestionId" />

            <p class="error-line">@savingError</p>
            <SaveButton Onclick="SaveData" Text="Save Changes" />
        </form>
    </div>
}

@code {
    private string questionFetchingError = "Error";
    private string savingError = string.Empty;
    [SupplyParameterFromForm]
    public QuestionEditingForm formData { get; set; }

    [Parameter] public DraftTestQuestionId QuestionId { get; set; }
    [Parameter] public Action GoBackAction { get; set; }

    protected override async Task OnParametersSetAsync() {
        DraftTestQuestion? question = await testsCreationDbOperationsService.GetDraftTestQuestionById(QuestionId);
        if (question is null) {
            questionFetchingError = "Question not found";
            return;
        }
        formData = QuestionEditingForm.FromDraftTestQuestion(question);
        questionFetchingError = "";
    }

    private async void SaveData() {
        savingError = string.Empty;
        Err formErr = formData.Validate();

        if (formErr.NotNone()) {
            savingError = formErr.Message;
            return;
        }

        Err err = await testsCreationDbOperationsService.UpdateDraftTestQuestion(QuestionId, formData);
        if (err.NotNone()) {
            savingError = err.Message;
        }
        else if (formData.AnswersType.HasImage()) {
            var imageKeys = formData.Answers.Select(x => (x as IAnswerFormWithImage).ImagePath);
            vokimiStorageService.ClearUnusedAnswerImagesForQuestion(QuestionId, imageKeys);
        }
    }
}
