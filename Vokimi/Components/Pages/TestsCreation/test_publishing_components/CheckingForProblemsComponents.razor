@inject IDbContextFactory<VokimiDbContext> dbContextFactory

<div class="validating-container">
    <div class="problems-checking-label">
        Checking test  for problems...
    </div>
    @if (problemsList.Count > 0) {
        <div class="errors-list">
            <label class="errors-list-column-label">Area</label>
            <label class="errors-list-column-label">Problem</label>
            @foreach (var problem in problemsList) {
                <label class="problem-area">@problem.Area</label>
                <label class="problem-message">@problem.Problem</label>
            }
        </div>
        <div class="back-btn" @onclick="BackToOverviewAction">
            Go To Fixing
        </div>
    }
    else {
        <div class="no-problems-div">
            <label>No problems were found in the test. You can move on to the next stage</label>
            <PublishingStageNavigationButtons GoBackAction="BackToOverviewAction">
                <div class="move-to-next-stage-btn"
                     @onclick="ChangeToTagsAddingAction">
                    Continue
                </div>
            </PublishingStageNavigationButtons>
        </div>
    }
</div>

@code {

    [Parameter] public Action ChangeToTagsAddingAction { get; set; }
    [Parameter] public Action BackToOverviewAction { get; set; }
    [CascadingParameter(Name = "TestId")] public DraftTestId TestId { get; set; }


    private List<TestPublishingProblemDto> problemsList = [];
    protected override async Task OnInitializedAsync() {
        await FetchProblems();
        await base.OnInitializedAsync();

    }
    private async Task FetchProblems() {
        problemsList = [new("General", "Unable to receive data")];
        using (var db = dbContextFactory.CreateDbContext()) {
            problemsList = await GenericTestsPublishingDbOperations.CheckProblemsForGenericTest(db, TestId);
        }
        StateHasChanged();
    }
}
