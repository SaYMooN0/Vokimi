@using System.Text.RegularExpressions


@inject TestsCreationDbOperationsService testsCreationDbOperationsService

<input @bind="resultId" placeholder="Type new result id" name="@Guid.NewGuid()" class="result-id-input" />
<p class="error-string">@errorMessage</p>


@code {
    [Parameter] public Func<Task<List<string>>> AlreadyExistingResultIds { get; set; }
    [CascadingParameter(Name = "TestId")] public DraftTestId TestId { get; set; }

    private readonly string id = "new-result-dialog";
    private BaseDialog baseDialogRef;
    private string errorMessage;
    private string resultId;

    private async Task Close() => await baseDialogRef.CloseAsync();
    public async Task Open() =>
    await baseDialogRef.OpenAsync();

    private readonly Regex ResultStringIdValidatingRegex = new("^[a-zA-Z0-9_-]+$");


    public async Task<string?> SaveNewResult() {
        errorMessage = string.Empty;
        resultId = resultId.Trim();
        if (
            string.IsNullOrWhiteSpace(resultId) ||
            resultId.Length > BaseTestCreationConsts.ResultIdMaxCharacters ||
            resultId.Length < BaseTestCreationConsts.ResultIdMinCharacters) {

            return ShowErrorAndReturnNull(
                $"Result id must be between {BaseTestCreationConsts.ResultIdMinCharacters} and {BaseTestCreationConsts.ResultIdMaxCharacters} characters");
        }

        if (!ResultStringIdValidatingRegex.IsMatch(resultId)) {
            return
            ShowErrorAndReturnNull("Result id can only contain letters, numbers, underscores, and hyphens");

        }

        if ((await AlreadyExistingResultIds()).Contains(resultId)) {
            return ShowErrorAndReturnNull("Result with such id already exists");

        }
        Err err = await testsCreationDbOperationsService.CreateNewDraftTestResult(TestId, resultId);
        if (err.NotNone()) {
            return ShowErrorAndReturnNull(err.ToString());
        }
        return resultId;

    }
    private string? ShowErrorAndReturnNull(string error) {
        errorMessage = error;
        StateHasChanged();
        return null;
    }
}

