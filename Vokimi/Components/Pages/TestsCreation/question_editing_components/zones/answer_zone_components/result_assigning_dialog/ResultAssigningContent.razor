@inject TestsCreationDbOperationsService testsCreationDbOperationsService

<label class="choose-label">Choose id of the related result</label>

<div class="possible-results-container">
    <InputRadioGroup @bind-Value="ChosenResult" Name="@groupName">
        @foreach (var result in ResultIds) {
            <div class="possible-result">
                <InputRadio name="@groupName" id="@($"{groupName}-{result}")" value="@result" TValue="string" />
                <label for="@($"{groupName}-{result}")">@result</label>
            </div>
        }
    </InputRadioGroup>

    <div class="add-new-res-btn" @onclick="ChangeToResultCreating">Create New</div>
</div>

<p class="error-string">@errorString</p>

@code {
    private List<string> ResultIds=[];

    [Parameter] public Action ChangeToResultCreating { get; set; }
    [CascadingParameter(Name = "TestId")] public DraftTestId TestId { get; set; }

    private string groupName = Guid.NewGuid().ToString();

    private string? errorString { get; set; }
    private string? ChosenResult { get; set; }

    public string? SaveResult() {

        if (string.IsNullOrEmpty(ChosenResult)) {
            errorString = "Choose result";
            StateHasChanged();
            return null;
        }
        return ChosenResult;
    }
    public void UpdateDataOnOpen(List<string> resultIds) {
        ChosenResult = string.Empty;
        ResultIds = resultIds;
        errorString = string.Empty;
        StateHasChanged();
    }
}
