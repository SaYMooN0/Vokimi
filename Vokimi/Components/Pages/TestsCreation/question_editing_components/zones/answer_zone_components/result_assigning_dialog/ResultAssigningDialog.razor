@inject IDbContextFactory<VokimiDbContext> dbContextFactory



<link rel="stylesheet" href="/css/result_assigning_dialog.css" />


<BaseDialog DialogId="result-assigning-dialog" @ref="baseDialogRef">
    <div class="dialog-content">
        @if (string.IsNullOrWhiteSpace(errorString)) {
            @if (isResultCreationContent) {
                <ResultCreationContent @ref="resultCreationContentRef"
                                       AlreadyExistingResultIds="AllResultStringIdsForTest" />
            }
            else {
                <ResultAssigningContent @ref="resultAssigningContentRef"
                                        ChangeToResultCreating="()=>isResultCreationContent=true" />
            }
            <div class="bottom-btns-container">
                <div @onclick="Close">Cancel</div>
                <div @onclick="OnSaveClick">Save</div>
            </div>

        }
        else {
            <p class="error-string">@errorString</p>
        }
    </div>
</BaseDialog>

@code {
    private BaseDialog baseDialogRef { get; set; }
    private ResultCreationContent resultCreationContentRef { get; set; }
    private ResultAssigningContent resultAssigningContentRef { get; set; }
    private bool isResultCreationContent = false;
    private string errorString = "";


    [CascadingParameter(Name = "TestId")] public DraftTestId TestId { get; set; }

    private List<string> currentResultsListToModifyRef = [];

    private async Task<List<string>> AllResultStringIdsForTest() {
        using (VokimiDbContext db = dbContextFactory.CreateDbContext()) {
            BaseDraftTest? test = await db.DraftTestsSharedInfo.FirstOrDefaultAsync(i => i.Id == TestId);
            if (test is null) {
                errorString = "Test not found";
                StateHasChanged();
                return [];
            }
            return test.PossibleResults.Select(r => r.StringId).ToList();
        }
    }
   

    private Action RerenderResutsViewComponents;


    public async Task Open(List<string> answerResultsToModify, Action rerenderResulViewComponent) {
        isResultCreationContent = false;
        errorString = string.Empty;
        StateHasChanged();

        currentResultsListToModifyRef = answerResultsToModify;
        RerenderResutsViewComponents = rerenderResulViewComponent;

        var resulsToChooseFrom = (await AllResultStringIdsForTest())
            .Where(r => !currentResultsListToModifyRef.Contains(r))
            .ToList();
        resultAssigningContentRef.UpdateDataOnOpen(resulsToChooseFrom);

        await baseDialogRef.OpenAsync();
    }
    private async void Close() =>
        await baseDialogRef.CloseAsync();


    private async void OnSaveClick() {
        string? newResId = isResultCreationContent ?
            await resultCreationContentRef.SaveNewResult() :
            resultAssigningContentRef.SaveResult();

        if (string.IsNullOrEmpty(newResId)) { return; }

        if (currentResultsListToModifyRef.Count() >= GenericTestCreationConsts.MaxResultsCountForAnswer) {
            errorString = $"You can't assign more than {GenericTestCreationConsts.MaxResultsCountForAnswer} results to one answer";
            StateHasChanged();
        }
        else {
            currentResultsListToModifyRef.Add(newResId);
            RerenderResutsViewComponents();
            Close();
        }

    }
}
