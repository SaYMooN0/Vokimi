@inject VokimiStorageService vokimiStorageService


<div class="answer-main-content">
    <textarea type="text" @onchange="@OnTextChanged" value="@AnswerText" placeholder="Type here text of the answer..." />
    <div class="image-input-zone">
        @if (!string.IsNullOrEmpty(AnswerImage)) {
            <img src="@ImgOperationsHelper.ImageUrlWithVersion(AnswerImage)" />
        }
        <InputFile id="@id" OnChange="HandleFileChange" accept=".jpg,.png,.webp" hidden />
        <label class="error-string">@errorString</label>
        <label for="@id" class="change-img-btn">@(string.IsNullOrEmpty(AnswerImage) ? "Add image" : "Change")</label>
    </div>

</div>

@code {
    private string id = Guid.NewGuid().ToString();
    private string errorString = "";


    [Parameter] public DraftTestQuestionId QuestionId { get; set; }

    [Parameter] public string AnswerText { get; set; }
    [Parameter] public EventCallback<string> AnswerTextChanged { get; set; }

    [Parameter] public string AnswerImage { get; set; }
    [Parameter] public EventCallback<string> AnswerImageChanged { get; set; }

    private async Task OnTextChanged(ChangeEventArgs e) {
        AnswerText = (string)e.Value;
        await AnswerTextChanged.InvokeAsync(AnswerText);
    }
    private async Task HandleFileChange(InputFileChangeEventArgs e) {
        var file = e.File;

        if (file is not null) {
            if (file.Size > BaseTestCreationConsts.MaxImageSizeInBytes) {
                errorString = $"File is too big. Max allowed size: {BaseTestCreationConsts.MaxImageSizeInMB}MB";
                return;
            }
            try {
                using (var stream = file.OpenReadStream(maxAllowedSize: BaseTestCreationConsts.MaxImageSizeInBytes)) {
                    (await vokimiStorageService.SaveDraftTestAnswerImage(stream, QuestionId)).Switch(
                      path => { AnswerImage = path; AnswerImageChanged.InvokeAsync(path); },
                        err => errorString = $"Error uploading cover: {err.Message}"
                    );
                }
            } catch (Exception ex) {
                errorString = $"Server error. Please try again later";
            }
        }
    }
}
