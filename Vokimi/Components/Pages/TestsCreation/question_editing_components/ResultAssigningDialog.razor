@inject TestsCreationDbOperationsService testsCreationDbOperationsService



<link rel="stylesheet" href="css/result_assignin_dialog.css" />

<BaseDialog DialogId="result-assigning-dialog" @ref="baseDialogRef">
    <div class="dialog-content">
        <label class="choose-label">Choose id of the related result</label>
        <div class="possible-results-container">
            <InputRadioGroup @bind-Value="ChosenResult" Name="@groupName">
                @foreach (var result in PossibleResults) {
                    <div class="possible-result">
                        <InputRadio name="@groupName" id="@($"{groupName}-{result}")" value="@result" TValue="string" />
                        <label for="@($"{groupName}-{result}")">@result</label>
                    </div>
                }
            </InputRadioGroup>

            <div class="add-new-res-btn" @onclick="CreateNewResultAction">Create New</div>
        </div>
        <p class="error-string">@errorString</p>
        <div class="bottom-btns-container">
            <div @onclick="Close">Cancel</div>
            <div @onclick="SaveResult">Save</div>
        </div>
    </div>
</BaseDialog>

@code {
    [Parameter] public Action CreateNewResultAction { get; set; }
    [Parameter] public Action StateHasChangedAction { get; set; }
    [CascadingParameter(Name = "TestId")] public DraftTestId TestId { get; set; }

    private string groupName = Guid.NewGuid().ToString();
    private BaseDialog baseDialogRef { get; set; }


    private string? errorString { get; set; }
    private string? ChosenResult { get; set; }
    private List<string> PossibleResults { get; set; } = [];
    private BaseAnswerForm AnswerFormRef { get; set; }

    private void SaveResult() {
        if (AnswerFormRef is null) {
            errorString = "An error has occurred. Click 'Cancel' and try again";
            StateHasChanged();
            return;
        }

        if (string.IsNullOrEmpty(ChosenResult)) {
            errorString = "Choose result";
            StateHasChanged();
            return;
        }
        if (AnswerFormRef.RelatedResultIds.Count >= TestCreationConsts.MaxResultsCountForAnswer) {
            errorString = $"You can't assign more than {TestCreationConsts.MaxResultsCountForAnswer} results to one answer";
            StateHasChanged();
            return;
        }
        AnswerFormRef.RelatedResultIds.Add(ChosenResult);
        StateHasChangedAction();
        Close();
    }

    public async Task Open(BaseAnswerForm answerToAsign) {
        errorString = string.Empty;
        ChosenResult = null;
        await FetchPossibleResultsForAnswer(answerToAsign);
        AnswerFormRef = answerToAsign;
        StateHasChanged();
        await baseDialogRef.OpenAsync();
    }
    private async void Close() =>
        await baseDialogRef.CloseAsync();

    private async Task FetchPossibleResultsForAnswer(BaseAnswerForm answer) =>
       (await testsCreationDbOperationsService.GetResultStringIdsForDraftTest(TestId)).Switch(
        ids => PossibleResults = ids.Except(answer.RelatedResultIds).ToList(),
        err => {
            errorString = err.ToString();
            PossibleResults = [];
            StateHasChanged();
        }
    );
}
