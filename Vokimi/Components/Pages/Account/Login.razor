@inject NavigationManager navigationManager
@inject AuthHelperService authHelperService
@inject IDbContextFactory<VokimiDbContext> dbContextFactory

@page "/login"
<PageTitle>Authorization</PageTitle>

<FormContainer Model="form" OnValidSubmit="HandleLogin" FormName="AuthorizationForm">
    <InputText placeholder="Email" class="input-text" @bind-Value="form.Email" />
    <ValidationMessage For="@(() => form.Email)" class="err-message" />

    <InputText placeholder="Password" class="input-text" @bind-Value="form.Password" type="password" />
    <ValidationMessage For="@(() => form.Password)" class="err-message" />

    @if (!string.IsNullOrEmpty(serverErrorMessage)) {
        <label class="err-message">@serverErrorMessage</label>
    }

    <button type="submit">Log In</button>
    <a href="/signup">I don't have an account</a>
</FormContainer>

@code {
    [CascadingParameter]
    public HttpContext httpContext { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string serverErrorMessage { get; set; }

    [SupplyParameterFromForm]
    private AuthorizationForm form { get; set; } = new();

    private async Task HandleLogin() {
        using (var db = dbContextFactory.CreateDbContext()) {
            AppUser? user = await db.AppUsers.FirstOrDefaultAsync(u => u.LoginInfo.Email == form.Email);
            if (user is null)
                serverErrorMessage = "There is no account with this email";

            else if (!BCrypt.Net.BCrypt.Verify(form.Password, user.LoginInfo.PasswordHash))
                serverErrorMessage = "Invalid password";
            else {
                var principal = authHelperService.CreateUserPrincipal(form.Email, user.Id);
                await httpContext.SignInAsync(AuthHelperService.AuthScheme, principal);
                navigationManager.NavigateTo("/acc", true);
            }
        }
    }
    protected override async Task OnParametersSetAsync() {
        if (authHelperService.IsSignedIn(await authenticationStateTask)) {
            navigationManager.NavigateTo("/acc", true, true);
        }
    }
}
