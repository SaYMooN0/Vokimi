@inject NavigationManager navigationManager
@inject AuthHelperService authHelperService
@inject UsersDbOperationsService usersDbOperationsService
@page "/acc"
@page "/acc/{userId}"

<PageTitle>Account</PageTitle> @* or user name if its someone's *@

@switch (pageState)

{
    @case PageState.MyAcc:
        <MyAcc />
        break;
    @case PageState.UserPublicAcc:
        <UserAcc PageOwnerId="ownerId.Value" />
        break;
    @case PageState.PrivateAcc:
        <PrivateAcc PageOwnerId="ownerId.Value" />
        break;
    @case PageState.UserNotFound:
        <UserNotFound />
        break;
    @default:
        <h2>I don't but I'd really like to know why you see this message</h2>
        break;
}

<h3>
    Account page
</h3>

@code {

    private enum PageState
    {
        MyAcc,
        UserPublicAcc,
        PrivateAcc,
        UserNotFound
    }

    private PageState pageState { get; set; }
    private AppUserId? ownerId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public string userId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(userId))
        {
            AuthenticationState? authState = await authenticationStateTask;

            if (authHelperService.IsSignedIn(authState))
            {
                pageState = PageState.MyAcc;
            }
            else
            {
                navigationManager.NavigateTo("/login", true);
            }
        }
        else if (Guid.TryParse(userId, out Guid guid))
        {
            ownerId = new(guid);
            AppUser? appUser = await usersDbOperationsService.GetUserById(ownerId.Value);

            pageState = appUser switch
            {
                null => PageState.UserNotFound,
                { IsAccountPrivate: false } => PageState.UserPublicAcc, //check if friends
                _ => PageState.PrivateAcc
            };

        }
        else { pageState = PageState.UserNotFound; }

    }
}