@page "/acc"
@page "/acc/{PageStateParam}"

@inject NavigationManager navigationManager
@inject AuthService authService

<PageTitle>Account</PageTitle>

<h3>
    Your account page

</h3>
@switch (_pageState)

{
    @case PageState.Account:
        <AccountPageContent />
        break;
    @case PageState.Authorization:
        <div class="form-container">
            <AuthorizationFormComponent />
        </div>
        break;
    @case PageState.Registration:
        <div class="form-container">
            <RegistrationFormComponent />
        </div>
        break;
}


@code {
    private enum PageState
    {
        Account,
        Authorization,
        Registration
    }

    private PageState _pageState = PageState.Authorization;

    [Parameter]
    public string PageStateParam { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        bool signedIn = await authService.IsSignedInAsync();

        if (signedIn)
            _pageState = PageState.Account;
        else if (PageStateParam?.ToLower() == "signup")
            _pageState = PageState.Registration;
        else
            _pageState = PageState.Authorization;
    }

    public class LogOutForm
    {
        public string UserEmail { get; set; }
    }

    private LogOutForm form { get; set; } = new();

    protected override void OnInitialized()
    {
        form = new();
        form.UserEmail = "";
    }
    private async Task HandleValidSubmit()
    {
        await authService.SignOutAsync();
        navigationManager.NavigateTo("/acc");
    }
}