@inject AuthService authService
@inject NavigationManager navigationManager
<h3>AuthorizationFormComponent</h3>

<EditForm Model="@form" OnValidSubmit="HandleValidSubmit" FormName="AuthorizationForm">
    <DataAnnotationsValidator />
    <div class="form-content">

        <InputText placeholder="Email" class="input-text" @bind-Value="form.Email" />
        <ValidationMessage For="@(() => form.Email)" class="err-message" />

        <InputText placeholder="Password" class="input-text" @bind-Value="form.Password" type="password" />
        <ValidationMessage For="@(() => form.Password)" class="err-message" />
        @if (!string.IsNullOrEmpty(serverErrorMessage))
        {
            <label class="err-message">@serverErrorMessage</label>
        }
        <button type="submit">Log In</button>
        <a href="/acc/signup">I don't have an account</a>

    </div>
</EditForm>
@code {
    [CascadingParameter]
    public HttpContext? httpContext { get; set; }

    private string serverErrorMessage{ get; set; }

    [SupplyParameterFromForm]
    private AuthorizationForm form { get; set; } = new();

    private async Task HandleValidSubmit()
    {
        Err serverErr=await authService.SignInAsync(form.Email, form.Password);
        if(serverErr.NotNone())
        {
            serverErrorMessage = serverErr.Message;
            return;
        }
        navigationManager.NavigateTo("/acc");
    }
}
