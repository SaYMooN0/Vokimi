@using System.Text.RegularExpressions


@inject NavigationManager navigationManager
@inject EmailService emailService
@inject UsersDbOperationsService usersDbOperationsService
@inject AuthHelperService authHelperService

@page "/signup"
<PageTitle>Registration</PageTitle>

@rendermode RenderMode.InteractiveServer

@if (emailAlreadySent)
{
    <h3>@form.Username, thank you for registration</h3>
    <label>
        Link to complete the registration has been sent to <span>@form.Email</span>.
        Click on the link in your email client to complete the registration
    </label>
}
else
{
    <FormContainer Model="form" OnValidSubmit="HandleValidSubmit" FormName="RegistrationForm">
        <label class="form-title">Create an account</label>

        <InputText placeholder="Username" class="input-text" @bind-Value="form.Username" />
        <ValidationMessage For="@(() => form.Username)" class="err-message" />

        <InputText placeholder="Email" class="input-text" @bind-Value="form.Email" />
        <ValidationMessage For="@(() => form.Email)" class="err-message" />

        <InputText placeholder="Password" class="input-text" @bind-Value="form.Password" type="password" />
        <ValidationMessage For="@(() => form.Password)" class="err-message" />

        <InputText placeholder="Confirm Password" class="input-text" @bind-Value="form.ConfirmPassword" type="password" />
        <ValidationMessage For="@(() => form.ConfirmPassword)" class="err-message" />

        @if (!string.IsNullOrEmpty(serverErrorMessage))
        {
            <label class="err-message">@serverErrorMessage</label>
        }

        <button type="submit">SignUp</button>
        <a href="/login">I already have an account</a>
    </FormContainer>
}




@code {
    private bool emailAlreadySent { get; set; } = false;
    private string serverErrorMessage { get; set; } = string.Empty;
    private RegistrationForm form = new();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    protected override async Task OnParametersSetAsync()
    {
        if (authHelperService.IsSignedIn(await authenticationStateTask))
        {
            navigationManager.NavigateTo("/acc", true, true);
        }
    }

    private async void HandleValidSubmit()
    {
        var valEr = ValidateForm();
        if (valEr.NotNone())
            serverErrorMessage = valEr.Message;
        else if (await usersDbOperationsService.IsEmailTaken(form.Email))
            serverErrorMessage = "Account with this email already exists";
        else
        {
            string confirmationCode = GenerateConfirmationCode();
            (await usersDbOperationsService.CreateUnconfirmedUser(form, confirmationCode)).Switch(
                async user =>
                {
                    string confirmationLink = GenerateConfirmationLink(confirmationCode);
                    await emailService.SendConfirmationLink(form.Email, confirmationLink);
                    emailAlreadySent = true;
                },
                err => { serverErrorMessage = "An error occurred while registering, please try again later"; }
            );
        }
        StateHasChanged();

    }
    private Err ValidateForm()
    {
        serverErrorMessage = string.Empty;
        Regex nameRegex = new(@"^[a-zA-Z0-9_.,><~^А-Яа-яЁё]*$");
        if (form.Username.Length < 5 ||
            form.Username.Length > 30 ||
            !nameRegex.IsMatch(form.Username)
        ) return new("Invalid username");


        Regex emailRegex = new(@"^[^@\s]+@[^@\s]+\.[^@\s]+$");
        if (!emailRegex.IsMatch(form.Email))
            return new("Invalid email address");

        if (form.Password.Length < 8 || form.Password.Length > 30)
            return new("Password must be between 8 and 30 characters long");


        return Err.None;
    }

    private string GenerateConfirmationCode() =>
        $"{DateTime.Now.GetHashCode()}-{form.GetHashCode()}";
    private string GenerateConfirmationLink(string confirmationCode) =>
        $"{navigationManager.BaseUri}registration-confirmation?email={form.Email}&code={Uri.EscapeDataString(confirmationCode)}";

  
}
