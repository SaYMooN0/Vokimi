@using Microsoft.AspNetCore.WebUtilities

@page "/registration-confirmation"
<PageTitle>Confirm Registration</PageTitle>

@inject NavigationManager navigationManager
@inject UsersDbOperationsService usersDbOperationsService
@inject AuthHelperService authHelperService

<div class="confirmation-container">

    <h3>Registration Confirmation</h3>
    @if (registrationConfirmed)
    {
        <label>
            Registration successfully confirmed
        </label>
    }
    else
    {
        <label class="error-message">@serverMessage</label>
    }

</div>


@code {

    [CascadingParameter]
    public HttpContext? httpContext { get; set; }

    private bool registrationConfirmed { get; set; } = false;
    private string serverMessage { get; set; }
    private string email { get; set; } = null;
    private string code { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        registrationConfirmed = false;
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);

        if (!TryGetEmailAndCode(uri))
            serverMessage = "Try to reload the page. If that doesn't help, try registering again";

        else if (await usersDbOperationsService.IsEmailTaken(email))
            serverMessage = "Email is already confirmed. Please use authorization form to log in";

        else await SignInUser(email, code);

    }
    private bool TryGetEmailAndCode(Uri uri)
    {
        email = null;
        code = null;

        var queryParams = QueryHelpers.ParseQuery(uri.Query);
        if (queryParams.TryGetValue("email", out var e))
            email = e;

        if (queryParams.TryGetValue("code", out var c))
            code = c;

        return !string.IsNullOrEmpty(email) && !string.IsNullOrEmpty(code);
    }

    private async Task SignInUser(string email, string code)
    {
        (await usersDbOperationsService.TryToConfirmUser(email, code)).Switch(
            async user =>
            {
                var principal = authHelperService.CreateUserPrincipal(email, user.Id);
                await httpContext.SignInAsync(AuthHelperService.AuthScheme, principal);
                registrationConfirmed = true;
            },
            err => { serverMessage = err.Message; }
        );
    }
}
