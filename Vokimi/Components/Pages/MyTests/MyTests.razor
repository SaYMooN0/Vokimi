@using Vokimi.Components.Pages.MyTests.tabs

@inject AuthHelperService authHelperService
@inject NavigationManager navigationManager



@page "/mytests"
@attribute [Authorize]

<PageTitle>My Tests</PageTitle>
@rendermode InteractiveServer


<div class="tabs-container">
    <div class="tabs-switcher">
        <div class='@(isCurrentTabCollections? "": "active")' @onclick="()=>{isCurrentTabCollections=false;}">
            Tests Creation
        </div>
        <div class='@(isCurrentTabCollections? "active":"")' @onclick="()=>{isCurrentTabCollections=true;}">
            My Collections
        </div>
    </div>
    <div class="tab-content">
        @if (!isCurrentTabCollections) {
            <MyTestsCreationTab />
        }
        else {
            <MyTestsCollectionTab />
        }
    </div>
</div>


@code {
    private bool isCurrentTabCollections = false;


    protected override async Task OnParametersSetAsync() {
        isCurrentTabCollections = false;

    }
}


@* @inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JsRuntime
@inject AuthHelperService authHelperService

@page "/mytests"
@rendermode InteractiveServer

<h2>My Tests</h2>
<h5>@userIdInfo</h5>
@code {
    private string userIdInfo = "";

    protected async override Task OnAfterRenderAsync(bool firstRender) {
        HttpContext httpContext = httpContextAccessor.HttpContext;

        AppUserId? userId = authHelperService.GetUserIdFromClaims(httpContext.User);
        if (userId is null) {
            await JsRuntime.InvokeVoidAsync("window.location.replace","/login" );
        }
        else {
            userIdInfo = userId.Value.ToString();
            StateHasChanged();
        }
    }
} *@

