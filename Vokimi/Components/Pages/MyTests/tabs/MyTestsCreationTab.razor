@inject IHttpContextAccessor httpContextAccessor
@inject AuthHelperService authHelperService
@inject NavigationManager navigationManager
@inject IDbContextFactory<VokimiDbContext> dbContextFactory

<TestsViewSection SectionLabel=@($"Draft Tests ({draftTestsCount})")>
    <div class="test-vms-container">
        @if (draftTests is not null && draftTests.Length > 0) {
            @foreach (var draftTestVm in draftTests) {
                <DraftTestViewComponent Vm="draftTestVm" />
            }

            @if (draftTestsCount > testPackageCount) {
                <div class="see-all-btn">
                    See All
                    <svg viewBox="0 0 448 512">
                        <path d="M438.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L338.8 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l306.7 0L233.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160z" />
                    </svg>
                </div>
            }
        }
        else {
            <label class="no-draft-test">You have no draft tests</label>
        }
    </div>
</TestsViewSection>

<TestsViewSection SectionLabel=@($"Published Tests ({publishedTestsCount})")>
    <div class="test-vms-container">
    </div>
</TestsViewSection>

<button>Published Tests Statistic</button>

<div class="create-test-button" @onclick="OpenTemplateChoosingDialog">Create New</div>

<NewTestTemplateChoosingDialog @ref="newTestTemplateChoosingDialogRef" />

@code {
    private int draftTestsCount = 0;
    private int publishedTestsCount = 0;
    private int testPackageCount = 4;


    private DraftTestViewModel[] draftTests = [];
    private List<DraftTestViewModel> userTests = new();
    private NewTestTemplateChoosingDialog newTestTemplateChoosingDialogRef;

    protected override async Task OnInitializedAsync() {
        base.OnInitialized();
        AppUserId? appUserId = authHelperService.GetUserIdFromClaims(httpContextAccessor.HttpContext.User);
        if (appUserId is null) {
            navigationManager.NavigateTo("/login");
            return;
        }
        using (var db = dbContextFactory.CreateDbContext()) {
            AppUser? user = await db.AppUsers.FirstOrDefaultAsync(u => u.Id == appUserId.Value);
            if (user is null) {
                navigationManager.NavigateTo("/login");
                return;
            }
            draftTestsCount = user.DraftTests.Count();
            draftTests = user.DraftTests
                .Take(testPackageCount)
                .Select(t => DraftTestViewModel.FromTest(t))
                .ToArray();
            // userTests=
        }

    }
    public async void OpenTemplateChoosingDialog() {
        if (newTestTemplateChoosingDialogRef is not null)
            await newTestTemplateChoosingDialogRef.Open();
    }
}

