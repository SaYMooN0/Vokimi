@inject IDbContextFactory<VokimiDbContext> dbContextFactory

@if (string.IsNullOrEmpty(initError)) {
    <TestTakingComponentFrame ArrowsType="Vm.ArrowIcons"
                              GoToNextQuestion="GoToNextQuestion"
                              GoToPreviousQuestion="GoToPreviousQuestion">
        <QuestionNumberText>Question @(Vm.CurrentQuestionNumber + 1) / @Vm.TotalNumberOfQuestions</QuestionNumberText>
        <CurrentQuestionText>@Vm.CurrentQuestion.Text</CurrentQuestionText>
        <AnswersContent>
            @switch (Vm.CurrentQuestion.AnswersType) {
                case AnswersType.TextOnly:
                    <GenericTestTextOnlyAnswersDisplayComponent IsMultichoice="Vm.CurrentQuestion.IsMultiChoice"
                                                                Answers="@(Vm.CurrentQuestion.Answers
                                                                .Select(a=>(a as GenericTestTakingAnswerTextOnlyDto)))"
                                                                 />
                    break;
                case AnswersType.ImageOnly:
                    <GenericTestImageOnlyAnswersDisplayComponent Answers="@(Vm.CurrentQuestion.Answers
                                                                .Select(a=>(a as GenericTestTakingAnswerImageOnlyDto)))" />
                    break;
                case AnswersType.TextAndImage:
                    <GenericTestTextAndImageAnswersDisplayComponent Answers="@(Vm.CurrentQuestion.Answers
                                                                .Select(a=>(a as GenericTestTakingAnswerTextAndImageDto)))" />
                    break;
                default:
                    <div>
                        Unexpected err
                    </div>
                    break;

            }
        </AnswersContent>
    </TestTakingComponentFrame>
}
else {
    <h2 class="init-error-message">@initError</h2>
}
@code {
    [CascadingParameter(Name = "TestId")] public TestId TestId { get; set; }

    GenericTestTakingViewModel Vm = GenericTestTakingViewModel.Empty;
    private string? initError = null;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        using (var dbContext = dbContextFactory.CreateDbContext()) {
            TestGenericType? test = await dbContext.TestsGenericType.FirstOrDefaultAsync(t => t.Id == TestId);
            if (test is null) {
                initError = "Test not found";
                return;
            }
            Vm = GenericTestTakingViewModel.FromTest(test);
        }
    }
    private Err GoToNextQuestion() {
        SaveCurrentSelectedAnswers();
        if (Vm.CurrentQuestionNumber < Vm.TotalNumberOfQuestions - 1) {
            Vm.CurrentQuestionNumber++;
        }
        else {
            //move to conclusion if exists
        }
        return Err.None;
        //if its last question, check for errors
    }
    private Err GoToPreviousQuestion() {
        SaveCurrentSelectedAnswers();
        if (Vm.CurrentQuestionNumber > 0) {
            Vm.CurrentQuestionNumber--;
        }

        return Err.None;
    }
    private void SaveCurrentSelectedAnswers() {
       //helper class
    }

    private void LoadCurrentSelectedAnswers() {
        //helper class

    }
}
