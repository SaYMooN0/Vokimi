@inject IDbContextFactory<VokimiDbContext> dbContextFactory

@if (string.IsNullOrEmpty(initError)) {
    <TestTakingComponentFrame ArrowsType="Vm.ArrowIcons"
                              CurrentQuestionNumber="Vm.CurrentQuestionNumber"
                              QuestionsCount="Vm.TotalNumberOfQuestions"
                              QuestionText="@Vm.CurrentQuestion.Text"
                              GoToNextQuestion="GoToNextQuestion"
                              GoToPreviousQuestion="GoToPreviousQuestion">
        <AnswersContent>
            @foreach (var answer in Vm.CurrentQuestion.Answers) {
                <AnswerWrapper IsMultichoice="Vm.CurrentQuestion.IsMultiChoice">
                    @switch (Vm.CurrentQuestion.AnswersType) {
                        case AnswersType.TextOnly:
                            <GenericTestTextOnlyAnswerDisplayComponent Text="@((answer as GenericTestTakingAnswerTextOnlyDto).Text)" />
                            break;
                        case AnswersType.ImageOnly:
                            <GenericTestImageOnlyAnswerDisplayComponent Image="@((answer as GenericTestTakingAnswerImageOnlyDto).Image)" />
                            break;
                        case AnswersType.TextAndImage:
                            <GenericTestTextAndImageAnswerDisplayComponent Text="@((answer as GenericTestTakingAnswerTextAndImageDto).Text)"
                                                                           Image="@((answer as GenericTestTakingAnswerTextAndImageDto).Image)" />
                            break;
                        default:
                            <div>
                                Unexpected err
                            </div>
                            break;

                    }
                </AnswerWrapper>
            }
        </AnswersContent>
    </TestTakingComponentFrame>
}
else {
    <h2 class="init-error-message">@initError</h2>
}
@code {
    [CascadingParameter(Name = "TestId")] public TestId TestId { get; set; }
    private Dictionary<ushort, List<GenericTestAnswerId>> chosenAnswers = [];
    GenericTestTakingViewModel Vm = GenericTestTakingViewModel.Empty;
    private string? initError = null;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        using (var dbContext = dbContextFactory.CreateDbContext()) {
            TestGenericType? test = await dbContext.TestsGenericType.FirstOrDefaultAsync(t => t.Id == TestId);
            if (test is null) {
                initError = "Test not found";
                return;
            }
            Vm = GenericTestTakingViewModel.FromTest(test);
        }
    }
    private Err GoToNextQuestion() {
        return Err.None;
        //if its last question, check for errors
    }
    private Err GoToPreviousQuestion() {
        return Err.None;

    }
}
