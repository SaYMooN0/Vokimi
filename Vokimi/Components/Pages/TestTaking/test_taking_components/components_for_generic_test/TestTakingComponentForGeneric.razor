@inject IDbContextFactory<VokimiDbContext> dbContextFactory

@if (string.IsNullOrEmpty(initError)) {
    <TestTakingComponentFrame ArrowsType="Vm.ArrowIcons"
                              GoToNextQuestion="GoToNextQuestion"
                              GoToPreviousQuestion="GoToPreviousQuestion">
        <QuestionNumberText>Question @(Vm.CurrentQuestionNumber + 1) / @Vm.TotalNumberOfQuestions</QuestionNumberText>
        <CurrentQuestionText>@Vm.CurrentQuestion.Text</CurrentQuestionText>
        <AnswersContent>
            <div class="answers-content">
                <label class="answers-count-to-choose">
                    @AnswersToChooseLabel(Vm.CurrentQuestion.MinAnswersCount, Vm.CurrentQuestion.MaxAnswersCount)
                </label>
                @switch (Vm.CurrentQuestion.AnswersType) {
                    case AnswersType.TextOnly:
                        <GenericTestTextOnlyAnswersDisplayComponent IsMultichoice="Vm.CurrentQuestion.IsMultiChoice"
                                                                    Answers="@(Vm.CurrentQuestion.Answers
                                                                    .Select(a=>(a as GenericTestTakingAnswerTextOnlyDto)))"
                                                                    SelectedAnswersRef="selectedAnswersRef" />
                        break;
                    case AnswersType.ImageOnly:
                        <GenericTestImageOnlyAnswersDisplayComponent IsMultichoice="Vm.CurrentQuestion.IsMultiChoice"
                                                                     Answers="@(Vm.CurrentQuestion.Answers
                                                                     .Select(a=>(a as GenericTestTakingAnswerImageOnlyDto)))"
                                                                     SelectedAnswersRef="selectedAnswersRef" />
                        break;
                    case AnswersType.TextAndImage:
                        <GenericTestTextAndImageAnswersDisplayComponent IsMultichoice="Vm.CurrentQuestion.IsMultiChoice"
                                                                        Answers="@(Vm.CurrentQuestion.Answers
                                                                        .Select(a=>(a as GenericTestTakingAnswerTextAndImageDto)))"
                                                                        SelectedAnswersRef="selectedAnswersRef" />
                        break;
                    default:
                        <div>
                            Unexpected err
                        </div>
                        break;
                }
            </div>
        </AnswersContent>
    </TestTakingComponentFrame>
} else {
    <h2 class="init-error-message">@initError</h2>
}
@code {
    [CascadingParameter(Name = "TestId")] public TestId TestId { get; set; }

    GenericTestTakingViewModel Vm = GenericTestTakingViewModel.Empty;
    private string? initError = null;
    private HashSet<GenericTestAnswerId> selectedAnswersRef = [];

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        using (var dbContext = dbContextFactory.CreateDbContext()) {
            TestGenericType? test = await dbContext.TestsGenericType.FirstOrDefaultAsync(t => t.Id == TestId);
            if (test is null) {
                initError = "Test not found";
                return;
            }
            Vm = GenericTestTakingViewModel.FromTest(test);
        }
    }

    private Err GoToNextQuestion() {
        if (Vm.CurrentQuestionNumber < Vm.TotalNumberOfQuestions - 1) {
            if (selectedAnswersRef.Count > Vm.CurrentQuestion.MaxAnswersCount ||
                selectedAnswersRef.Count < Vm.CurrentQuestion.MinAnswersCount) {
                return new Err(AnswersToChooseLabel(Vm.CurrentQuestion.MinAnswersCount, Vm.CurrentQuestion.MaxAnswersCount));
            }
            Err savingErr = SaveCurrentSelectedAnswers();
            if (savingErr.NotNone()) {
                return savingErr;
            }
            Vm.CurrentQuestionNumber++;
            LoadCurrentSelectedAnswers();
        } else {
            //move to conclusion if exists
        }
        return Err.None;
        //if its last question, check for errors
    }
    private Err GoToPreviousQuestion() {
        if (Vm.CurrentQuestionNumber > 0) {
            Vm.CurrentQuestionNumber--;
            LoadCurrentSelectedAnswers();
        }

        return Err.None;
    }
    private Err SaveCurrentSelectedAnswers() {

        //helper class
        return Err.None;
    }

    private void LoadCurrentSelectedAnswers() {
        //helper class


    }
    private string AnswersToChooseLabel(int minCount, int maxCount) =>
        minCount != maxCount ?
            $"Choose from {minCount} to {maxCount} answers"
            : minCount == 1 ? "Choose only 1 answer" : $"Choose {minCount} answers";

}
